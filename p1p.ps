%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: p1.dvi
%%CreationDate: Sun Oct  8 20:32:09 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Medi NimbusRomNo9L-Regu
%%+ NimbusRomNo9L-ReguItal CMSY7
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter p1.dvi -o p1p.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.08:2023
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 755 2013-03-09 08:48:58Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 707 2012-09-21 14:17:30Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
 /startGlobal { true setglobal globaldict begin } bind def
 /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/UniqueID 5096648 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749B8D
07C9A8BBB76C74F0F05157151B418C385F2ECADE863C977BC1D0592216FF2843
DC1BB8509D9BB8356D008D7449147F456517EDB169678E28B2C0EDBD271BEC30
6E181064988515BD2B3AACC6D45DADEBD4DECAD9AC58CA06A6C9014B780C53D4
67D0FE46560B44CA4FF989A4D77F1B8828BB42507B524B622F10AC8781B19CE8
AA275F9FEDFB3036079F4F10ADC8CA8FAF5F5DA7088996FB632CEBD691C1F29A
FD52CB18BD258ADFB0B4B8B80F857B543BC64BE31FC83D5ED0A4866444501B5C
C98E1CF0A452E886EF57A241A093B769BB09B19B125F334D9D374A9C1B6CFFD6
FFED42F77C7624F8094CA624F45801B960F6E145D9623ADCB90F36C0C273C5B0
6E0AA4E0C95CDA1561529F446FE5489523B6E793FFF58C9DE064BC47635CCA71
AA72328472FF6822BD62A82B7765A73CA0239A9E28179AE7740477196602ABF4
2EE916B80AAFB638D00C1FB2A1EAFDC4516C7EE3EE4F5D3039E70EF3B07915B8
7C9C128C2ED3C27FE48D27D39B41E1ECEC46CD2209D760D75E743AD13AF1E761
A8B7F996ABCAEA43645546F42C87F6909258CC74419B96A39D6DA3233834894C
C60B03F867B6ADAA2C18F60040A9D8E70BAB12221217095DFC57117CDEB536FD
A09E11787D4F7B448F88
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463BC49115864B5B5A6569C59D057CF2A8C
FD282B79BC3FA1308A61476AFF58D91BFD63D1BABC326C4FB78A42CA08478425
E8038116DCD68406DCCA2F5A85858019428DC1DA7A7F42131319C2B08B6B93C3
64413BF65B6D8554C69AF4C1D98BA42AA91660B2AE57BAD964F6AE9BD13DC93F
44DC05BF90F7E1C05C954ACAC42A93DCAB215675B1C7894E2A0D724B606E9DA8
F016953104BF247B66A7BB05C64AD7636D951338BD379956280919E1F6CCAE67
34BEAB789A232E1082DEA0383E98A6F55D8C71CEA9D1554E7A796586577CFA8E
0A1567CA0F3C0A445EC1752A47E705F4EEA6268E2323E3C3369D97355E3B32C3
3CCB9F39E828B8B8317E4E50F94EFED6873046F14E850D30BCFD2B6A49A29126
CABDEB8551410ABFC1BAD9D79E03CAE74D67249247577F67F6E02B76C71D6809
A3ADEC3800693DF0FC7EFEBB1BFA166A088B8F232012896F122727523E1AD51E
E1D8B35EC2E6B2BB0314FD0E2835FB97FF4BC59F9E64756B4B5F2119B20D5BCF
AB27289A93B316981EAC33605FFF98C7D011DAF6ED1AE0ECE6A43A7A29E27903
3C4AAC3E18B02E195E87257DEB8A1F6489CA0115898F910F38FD25CE03F740C9
69FCD8FC6085A66D841ADED0348EF0A843D0F05CE3F579148DC11183ADE03A18
83B216F1DA8BD7F20B32D5A200D311AD5B70D8D7A6DF940E23FDF870E2858CDB
C2A33039814B0C5363F0ADB027A201E35FB4C9C631CF85C30F422B9F568B9ED2
25D9D69B6581864E351CA800EF635224885516C2A291A8A4132F4D2503B8C48A
50FA52CA3C85E11C1DC9E4C2143267370E240E581EEEDD6C8F062E85A8523B5B
3511CB2A4472AD2F31CC926B1958BEAB365EBCFD4E115498E2DC2DF2B4188BB2
9A5658D4C194A0990EBA589A7478D96BF1C37B5E81CC928D77CA54740EEA5E26
E4651F258EAE949DFF86E8DB2DF54D851AA72052511AF53DAF63F92AFED25998
FA67CBDFFD53A6555556089ADAB4DAF9B826BC53D97B40BBC5557A6F90A3CD9F
B434F4D12484E03E14C9CDDBF4F765FD970E1F82C2659A38F8F63251495D697C
3F327955F6408A0F6951FDECE16DC97E99984009138C4F0B725F50C0CC1C0B40
C04D1680D51033154CDEF915EC9DCB0572AB667F33FE709E3DDBED5D26699EC7
2B112FFF6E06D4095CAC5179C10AF28F2335EF1568615E74E502EA63AC05DEF5
6481C0395E893486EEF872AC08A9BC2BB7783E87F35E9752D76D9E7A10EC5715
686EF5AB4E365F99A464A8CCB2BE827CF6452874870B87F20A1422E72A76924F
C2E5220089E1E410EC6BC71173E3B08C0B15B184B024738B7B93D0E790B6611E
582915315C876EA8060DA1E3EAAA636751479348E0910FF3534B034159528CF0
34B4B64259B76D0CB42367815E974214FDEA19CFDE2EFEED6768F915224FA492
D7821289889B3BBE5626A0AE0A96E16DF68172A2FA4CED06E8728B9458990C79
13426DEC6B5C057130D3F2F248261F70D0F14165FDEF1C160A16A35865B057F7
5C264C865573C3D6A9EF2F678184865BC49CDF6F54B4931DB4E80FEA80DDBA9F
C089627C5E37F1402A7A72FA2A37B4A9D8774A3000FF4128513867EDA173A2E7
FE6651E557683614521110DEC1CCAC426117DDA7D3A3D10A0E8E06F1934736F8
BF9AD49A10A4C6F8A1744788B42ECD08C323F8920A6B43C57250455083EA09FF
3CF33FD9695902258140BEA3F27BC60B221A923B06DEF615BE588095F5F79831
871D857E80D35CE6C8A5729D453C89D2F0E0579CA25C553AF203F6C87A9DE29F
F9E7B197FDB730DBC40AD6906E58E69F91557AF9415268882B52C6C0C81CE9E0
C5956DECD879E2EA7FED78E959595B55313292ADC5D5BFE1A5EF764C000FDDAC
DDE4CE991BAEAA17415B2F61B9D10EAC831B759B737EAAEF8CF3CC2C7923EC48
6A47D87DFEFE463F7063E0E00A028B98F990B4D015153CCC2E1853473BBCC4EB
49C7683B7056EE108F5296FF68DCD3E59302B7F2F212FE99477ADC3F69279710
3CBDEDCD86C7C8540AE5946429B350770BA66D6FD926D4D51FB2F9D57ADE6D40
339955325265C0D5687884A192D357DBC2F667FC6730241A41A2AEB1DE5FBA89
2DFACE7CBA940417E262F020AC43AC01DB8BD67102E1322FD08D6A187A062517
0F3F9DECEC62F2E7186C23BFD0F22C7795779543BD58222BBB01ECAD3E012F90
A709AC89704578D44D6F7D41AC91E8404D8AE952C3C78E4A6BC9A924B91FA306
BB15DA5CB7FE994C3506E6C02DD94BF37E61513691DC7010505C0F1C9BDDF174
7CA2F97091D55EFD6E89E70322C72CB26CEC6AA0A9196E604BAD910F208BE4A7
D5D37240C8D5C3F893CE2B045FAA6ABE6447F7DAF2599EF2718C3BBE737BD085
229CD7C195D860792433C3DF19EE7B5C27E7BE0538ACEEDA4B4442E756A68697
334E1160E2ECB75AC97158A7C904B9092854DAA7B54F9E18142403BE85D1E2F8
9F771606231450985FE13F6F382BED2C0333FCCDE9366DDE33787CABD0FB7DA4
F518B81FADA81814332B622EB0CD5C79BFF412AD4EC3D83D0B7AB55624BAE04E
50CBEA2590B4D08DFDF5A9009205413FB5A7E21431D00C70298B5350DB696DF3
03605E34CBF2FED747DED2B68D2271AED7D13FD5276C6CD7F3B16DA873D2FE6B
AEF7E297E090796C113D22152BCFE41B6DC181ACEBFD70A6CD51D4CC0E77F703
510772CEFBD8C601126EE7212FE71674F98FA63EDA7312705B629387D73BA523
8A2F4C472AAC41A5626D16F21F37FFF3EFEFBD926AF60D0DF52CB11FD9EEA525
440DE26F3090B4DC27F9F63F5560D77F3601576675F7CE713A4BC89782ED8F00
2E1B62CFA49175BB0CACE3E07387A39889118F2E226CBC6515CBE0BECE2577A1
8E8C00A028ECD990CFC9B7EDAAD2C0B9AC42241B52D3E5FB9383E313B084100B
7D9AEAC2E3811089AFF3E608D224AAB01DCAE309E0AFC3DBADB8DCE9C44E878C
F5E2C2A3338A127C73EEF13C8AD275AB3D8F141B95F3251B6DABD584F17C7524
786CA34D933DD82E32144FAC0F0E34F1D0ECA423C805F64C606D0467149176EE
154BDCD604A3A3A5769147FDEDD00EC6E0A19B83B0FD74090B3D09D499C3B01F
3B49997524BB0DAA770498539B0212DE3A620060C06A513C830ACB43B2637119
5013F74FC07E862198AB570397AA2B3B5EA40431A79BB15A93FF08E3782FA0F5
8BB26F02FD8B087A8608FF9C86E836B7FFB7086E23B7168A0890CDEB4D14ED75
4D8D56C2BE2B6372F2D3FB20675765573824EE24E9191AA563B6D8D882C09196
6B06C337BE0C2A552670B49F6EAD48DBA338B0908359E8A7AA9D45889CD4D6B6
A19E38AE2F0747133E2FDF1A494A3F81C9D5B5AE42F44FB0118252A2354C8650
C9716F9F265E0F76FFF660C54AC08131B56DF9A9EB3095056CB4BD7791F969F3
CDEBF9AF6DA57A53101B40012F06C0462C608A5F9DB2DD224411C6517E60F7BC
DDB6503088F4D1C99603A4F83A7706D82887897B91EEAFECD5B95751D308F7BD
7D0635FA6B281E4E78186F500582F7889903485B7989BE925D2C4ACE7CE703F5
4C5C7DFEDD5E30E38BFA31E0ECF11110FA50AFCA7C0FB0113F4D08ACE5A60597
EFABA13EE462D27DD13E789FDB2D3B91A0A28D11907B246D94B12617AB50EB5A
520CD8B2844CC2239ABF00DB7D8E1A7DB1E86B93187E885AE2C67A8C0727BA09
A6F1F8523E200FA5CD3B8F7D76F978D9AB62CF403C7DAAC48E967E6607678082
2A651417E5C0A79444E197C64E8F6153842FB5B6A083739F75F0F1D250D6C807
557D968F75DC250C39549DDB85B8134BB8439F28AD7EBE92DD6F706BC31C4F3D
40CDA225B27791F6AACB88B49EF3217D9152D5FD2CB66FA58F798F8AD0CA4BE2
672DBCFBE1D7B69267D6606214410B8021ADB53251517E383C206CCD421C5381
955D7234D83E42A9F774F91AD362EFA6B85525983FE255A89DF972EF48B18D97
4075B09BA2E2D29A19A54BF1BBEABD08777D5D28316662052FBA8BDA9C438606
637C50F0783C95269D8D3C582FC922D2530A82070E89A6A1F0BBB31E7CA0CE29
F0571B3999F296645FF50EF766139341F410891694284050A48CA9E1CB491AD7
475792BDEECEC4D91D6760973648EBAD21D5F92139BDF11DEC505B1920E5B087
D72A89789D6FB26B8B0489089D83E4A076E7B0B2C23CCF3EF8B5E8214DB807EF
6AD45E9A37CE21993CB5D9CBDC8F856A26930508EF450AD319A210215B4270BC
46BE051B7589D6FF3B29A26A10554762025E8F743C9C61A9D6B85DA01D01B13B
3324B9CE836FCA098A4CC4C48401193456A57992AB854C604C82F1087D7D7FE0
9857E474945E15ADA8E0C7B6EB1C817BB430686307842337CD1F9695491BBBDF
271B5345C4468E3182D1CF834E45B944B22A2ABC2AE3CF565715A98A44094FAC
4ADBE69348344F81CB40A743099E5175C0AD49A9C9EA44FF3580C618C1814F11
2EB44D81CD6C92D7F51E5E2B153B5FC337F8F633B4D81A4172B9D4452D270035
74FD7A42EC29CEE0176D106E749F85804A7076AA4E9B5A79696E3E89C1B46989
EB500C4D5BE6CAFCC7D3D614BF4825EFCB01B35A95D0E9D9D32819BB04B067F6
6D89007B00481E882AB06201C1F6AB154AB370C7BFE817DDACED083C0763C03D
B348ABE7929E7FC2ED9528F08E80070FE040DE482CCDBF053E1EE1DC683B904B
B5B126C14DAB975221D359DF3651B29BACD2C0444426C6207EEB027CDC582F7D
F6D7501CD0889B4EFF5996ACF6D5BBF3895DB33246E87905B145A6BDF6766C34
A3C6A700407BBE1F218778F747D54CC66CC2813398B50A89DF3313E2889655D3
E49335E5F837C4E21DAA6029DEE881484562D5F344A4B45683A490E0091EA184
44D4D6CFA84C4C4C70CF4A80F92643FEB9A318C5B0C05A293BB88EC569C12D4A
9F8BEEF09CA25328E9C6B43277909C8D1D498DBCDE96A868E666DE53257DA57C
502EBB5C7489358361A4180EE48F5529487A198EAF6D255658FC52EE48924819
9A6059AE84C186BA3DDF8A3D03A6269D7BB2137246B12EF7278597CF20568361
0586A8BEA497E867582A10D46E47C4D4663B9318AA67E31A7FEBC9A6398FBABD
F4FE7C245CA0CED857D5D221547BBBF35F04915D14E3BCD27A9C7D030ADEE0E6
0AE724417C78A0FBDB341318FE9B000D51C01955F69F64035345B9715A173F8B
FB3CBB6594716BF240772EA9851E322D31F357016279B16FAD0488E7B669AD8C
F2B042F043CCBAEED54935EC00CB5F7CB4982A85E203B9D32BE33707E068070B
1F72133039DFE02B9DDC2399779F6C42DBA78FC2B63DF3D58B5B82B72F81DB73
914A96AB33681EF2BFB8B2FF94B950A27325171953B5BC7B34E6988A9BB23D42
1804238EF4AF285D0FFCD9AEDD4F03B500D860BEFB092A47C57C979AB2FD8647
270B7E6AB63BD61EA22C2DB34BDFEF9724C0838007DF72A8B7E3CDB134C239C0
2A9D1AF356BADF8FD85114A698EC085DB28C3249D2A770FF1B6AB814BBE2DACF
6E9AD7FA2D19D3372EA6E8CDE2DC583FBB570E9CB3C59678F57728DCFAC9E10B
B7CB5641F5F7A554A070852C5CC73BD909C7F8EBF682C62D88A62B0F259F9071
2E73D5BE21B2219612BA4A2C492948652359989CB2A45AE3395C80EA8C4AD522
9FCBF7E305EB652F6B28DEE4ED90AF97200A9B832E680CE18AC1376A92694F9B
411ACB0EFB065D71AA58CC8834C39BA23405490E40C230312B69338C949296E0
036A46EBF47D1203595FE0BEBA96B2452DBC9FF44B28D18169FE90A0D21238A0
1180DF4D567D7E4103A26BBA0A17D6555A56A989BD05F7789B59C6A978B1D8A0
315B4A2762762B7F603116B798DC6A255BE6483A3AA13B3ECEE040DA280902D3
F37E547B6C89BBCCE6C448AC5C61D17285F9E2E321C96C502CCA88645379B9BB
4962F261BDCCB1E9769A596773F81D368B45A06E27CDE9920F11079B64B9C788
8D2DCC9AAE50EADA3801C8F216664AEE6EFA1A10415B9B4001D647C9632FCFD5
56C742CB4FFE079E75679C6C05C124478E00CB8A79D098CF72BF5F35E2B1D6BE
8E1373B360B136A1D5DF94908478D7C973B72FEB0B826F16ECE0950824FD685A
D1B01401A6F2D73F6A5AFBAAD54BB46827DD7392D7A101E20692AE0A8E2A0BD2
9C706C50F86AE90725D1E34050AEEBF133C37C611AFCBF593DE3918616C24C7F
C8FC2C9174A2D012DA7F2B295D688BB050A33F33ACD3CBFE8B51B341911E9CB2
9251E04F27D2586848DFDF2E1D79D46B3BA9C6128D6ED040C9568CC2EF6F0531
D2664427830374B0F13DE25BE60E7D5DF243A1FB7BB740CA1F94C7CF1CD8CF6D
0E13498281853F11CF7EE57FEEC1C9BD914E3FDA6815C4EA7CE4871B7C66AD9F
B6C12DC55099E725A648BCB65FA2EAF673BFDC2FF43704E4839EC64CC988BF1D
D23669853C609CB3045F6414EA9873E687C9CB0CAB3648A5A89B2C2979CB3816
28621B92FB32A57CB451E3E25E17F61DFAEDC8017F13BF421488739077EFB203
750D9B004ECE77FE7D80AFFF51713B91271EB4551D0B76BAA2635F3632B6BD65
BCCD8580E3B39391DA58096830FB6A44FBDC6D0E31ED6A164ADA73978E9616FE
8275DDDE8B8E7DB15FC91EB9F482ECA76A4997362AF0DA60248130F81F4EEC3A
85473894928F8383DF007DF454355195F2FC08DDE0F61E5AAB2C4A8765636DBD
CFB2F040A0DCB03BC6A5C245BD404987CD3C3AC95172AFEDE0BE524846F2B723
75B6A404C2873E5CE6A38347DE769A0236FA66DD87E788CB34780FEC0CA9E0E9
CF1D4A07FC844EF58F428997E2A731A4F7BE7F725EE2C7A802F123A587155F78
EEC95DEB327F47DE79FDE7436030382F9EE94D0EA9C65E2D35E33B794FD8C77E
FEA63126005391045EDA7DB81917E55B0055DEA4779DFAE3617FC2CDE157EC88
5EA089F7BE3FDD62A35FE4D9F19A978F9D8C023B741492481748ED2B7412F43F
6225EF84B09BCC3DA9AE88D4FBC8B07EBB81EDC5A1B195F9B671BBBFB5327AF5
5D28DA395082199F4006A022E68E753578C6E020EEA044F10A53F08C8E6E3D01
D52FCD4948D52EC6FD52E30FA9F64DC7E300FFF48758F2EEAF138B9D180C36F9
9A8154887540F34145BE3A3FC8554030449B6F661D643EFB47535B2DAD846266
0D1873B8D307FB5621827F12F4C787A9EE78BCB1C24B2FC3587EC4043ADE33D6
EE10BE2A91BCAFCB39F9BCC0B4C20EADE37E762FEDFE0CA4968D2E483B917145
0E4CF3B8620A4518B15FA670091B9CF8B863A4BC8B23AE369B5B3291ECE58434
A395FFAFA55DE1BFC8478ACBDA4290E275D72FA892CA7348ACBF571E692CA98A
18459C58B3D0889E6BD45B77338853276DA52D0E62F0555ED228E6BA9A409F3E
02686AAF52A45C354CA5BD32D6341D58143C9DDC2C4DB06A51307B717B300956
EA8BB393D1D4F34F41095BAE956B2DB03FFAA4506163B20B023F5BC043E4CB1D
71934DB7B37496A88B69AC1E6011239ED7D6C478115C6200DA33D13BBBD899E1
113DB8E9E10BBE2AAAF0F5983B369A7D65F430E83301544A1596FB497EAAA779
D718630796D4D43D238D59123F59A4689F02B48F1A93B88B9AF07A42EC29CEE0
176DE0853DD365E9B853E93646FB4E4A58E17059A66A66132D35680501A47FFD
3C28A7E03678C2F4C648D2916424A2BBD6CC25F94FB7236008E709BEFEDD0162
C338DCAE28398846BC91180B209B8CE58AB2B08785F7C855026C8217C5FE9244
702987F92D32A14454BDC3E3C271422EC87B4E747E3E5C866B293DB76A9508E0
FA424046DBDD35EA6136188595307F2021779C6B88A0A38DCA04891C8FD94CEC
8F6783D733B7D7902F5E53E4950211BD68F65C3B67C4DAC47ECA88296E8DAD14
303008F6D0B54842DB9657A486D90B54DC9D5A83432D749F1047951094CFF677
ECD1AC125C7750588490111E7FDDEC92A8668685CA35DA36AB230E3D91EDC138
4F92AEFFB951414DF6321C6361D12879D78AC6396BC3936BD40FF147682FBE63
67C2521F9AB5BBFA9D7776DB2F6E82348B86E6D5E91E9FCDDFA1761BD627D86E
69BDF08C1356CE7697345E57C51F4C969C464C1CB1712283C42A77AE7874B977
439A9EB4D699114A950D536C1C44746579957E6552736F2923DE34A7C05AFECC
87868D475C5F8015B05CBC1B8C6717B22B54C2F289AAC0EEA7F800BC86CA8D72
66B8C35CA96A594D27DA3C1237C61DE1A5F5B26FC8966A2F798D7AEF0E05AFCE
599847B993C18E41D0CDEF4032A954D8DC1A188FE10A825C38395E5CBDCED6A7
D376AE173799F1FC77504661892F60E5A560333458DD227E611ED9B1914B4F73
9C8C730BD62F1067E30DBB91FC702F50B8E16229034B3007E7EE6B908CD64B81
C3DF7D7F7354C8074D1F529DEC11B075C82E24839489EAC16A89ACA2C20F6C0C
62C98E7AEE127E914C372C6E2DD84989E78792EC3F52A12C8CE52AF94EDF33E6
CC70BC0E96636EAAB676E726ADD778A4833AA4ADF9716441C3D9BA58487A9DF5
CF6F23F5CE84E9D8E13F000D152E42DB1C1ED509438C43F93BDF429403619BCF
C29B109BE23860C670D5EB5B0EE1C3B86C09BEE67F675948FA33F4D2CBED2347
FA235220D4F36657943255D62F0C84FE8A630204A8E64D8F940E9A4E00EBEB70
9BB571CBD6D51C00B349268DE077F06C6F25E8A5821F6CC8CEE36C5B3BDDCB4B
8EC7AAF5620C9DAC8F703ED627284A783F001789834F51A623C6CE62990E341D
55CFC940B88FA9C09F411132EC6D54CABB0D963A96E71C2A75FD1E629A7FAB88
9C48A47680E82D0E177FF1D6B50DAD534D89F7063E702EE6621E0AF8522E7DB4
5160A44D125456BA17D8B91011010407B5F2CAE7489CA86343376AD7861619AF
1B6FC488421D076652E96CB91941AD31FCD43342454B6C00F8F4F6193C02B06B
FB2B9ABA68B9495E15ED996F3AFAFA8B8FD7307E5D51659EE74A875CB811177A
20A894351D75B4E76E0663C96E44060C1D4CB37236209050865DB7C42DF625C6
0BC0F565C8E6BC119C8429EE319B1E09E4044F8B28FEA5784C817AB37CB52D23
205066E2D80EF7C7866BAA8C2626394C5103BA4718D58F167CB6741E06D4CE5E
22414639F52442A0323EC2D622350AEAA20BA78BC29D8A1A501CCC588F87E9F4
DA5880C6E7C6D85B60D3EBB8A621D2321B64AC31C545859F011EB636016EE266
358CD2C1D84BD7D71A5116E10B5BCF752C369CE03BB374617870DFF373AAE4A4
752F9BDE24042B95B58726FCFA82AC82DEA4676E334934D97ABEBD25542746AD
FAE256888C9EF3F242011E70880A8AEDA809E90BE4203C3F857F7770B251368B
7E2028EE56949E91D085720D5C5036680F49F355BECCE9F66BB97AD5208E31E1
5C11F080486FB455168B16B9C19D23A4A856B7465F0D262F2A55376943AF1BD2
DB10DA36874D32705EB5F1A1B135B5E55AE58AC7E45836CFCE51253276BDDBF7
E87A916C9AC53A08B1D1CAE774A3DA7C383A008B15B640C9FB9425829F82910A
A803A1AA7D8763049DA1AC907155FF9ADA3BFAECD3F7E9672BB2ACE24797F0C0
71858600C7D9DC5446E1A3792742DB2E2CB4A216C5447C0B7A27BFC6DDD6A93B
F5ED74076F822C98F8303E6C429F8680D9AB7102CB12F52D9055926E3037854C
8D92294C02F600F9866FD1D106A3BF6F906D7BA3D45E8FC0684D9E13F4A381D2
6014C3C2020CB8346C8C452280DED48610ECEBFD1286D67C6EFE829BE23D8E39
C6C46D57B006D6A65226228B3438A15A5A8D37340C0B5350D299455B43260E44
467A149CF2AA1F3EC79F8B5B9D9A5583113655FB6018AAE4A9A1936170A8E35E
175EE90316FF7A74B597983F4958B3AB41E7E7B03B28756874B861543EDAFA73
805144FC8798D2B6E2150E19E075F3EC3A2A42D4CA74EEC4882B2347AD426880
25BA4F6EABB49D675E6506E18EB6EA8FA9B5A411D8451E81BEEF1C34E9ACB91A
B3194C4A69AEA785B62C18282CC400326F3A7BE56AF0EA3AD2439EDA8A80553F
052F97683F90921C00B93E00859ED5801D0C8AC31722AA801EBE5EA067A6C8AC
6C883C5099B744592431A9F4018ED311FCDDD42A0112EAB13278B43FC621F9E5
AFE7D16CD04B3DE61F0F45EDA510CB7613020574CAE963EC6CA0130D397937F8
9010D08BD92015A6BE9B166FE5D8D122F00E5366FE564B51A183FAF47C351B00
4231A95E95ACA5E6B81A5235890772D611A1EA638DE6D74E93F1D9062B3C9AA8
187FDC9A983F063BE9033E6406E6904C0BED058FE68C454A624D4BDD96716276
2413C207AD8899CEA47C4021A78B51EA50D79C0F29225E4521E8B5CFD4B66576
9C7218CE56E9B71B8BEE060BF7A2A80956D1A0FDDC4557E1AE9AEB3B98F2D498
43AD5C0D84B71BA8F30DC34FA44CAE18A602FDA1257974D8F29CB3459BD3A221
6C59507A5B9111240AF367C085AB1835321D801F38226BD75F107CF1B29F914D
EA709C75489EE4ABE4F90844E296ECC409ECE8A74EA24C95944A549C3B253E65
E53678F4604F09FEF632F921F739107A5999E647AB9FC525B8D4E28A034DA040
D650098C5B7DED63748897304EE491E8CE8A10FFAA5C332A9541C7A558FDAFFA
06687B2D5D1EE279FAE85BF2362505172EB66AD42FBEAFA5544EFE640B924046
5E4D49B31D90D1231194053805F5BE430187A33F489539D6A23649B2FF92FF24
32A68855C0B9956C2F2BDB10D8C77E1017008F7C7CEA156F52F651004730BD86
CC1D22D9449612564D1CFE456EE56FC9C34568760C090E83ECF472F3644A80EC
EB0AFB5B8AAFFD158F31975EDE242674F5E7C0061B8982003053A863223E481E
0B0BF46B09806FB528E60B4B0A0837E0D61973FB96DE98816E3458455E1E8EAE
967B673879E6042CE2EA745A44FD25F38DCA95543B4491FEB002E7EBB9C9A18E
02BE2BA4740315B77C38D68F47E311B73A76241661E0EFAE41B01AF76719808E
7A45746DDD0E6402FCF749511B381DC9305146271332C0FC32FBC4A8132BA164
493FF981DE6E943D4739DAE64A8B738B73782923D98C3F6E08CDCF529477F86F
3898276E040E115F813152608AECA46AE2CC7A1298C14300B2E90DC96D9A39C3
4474A752BA0410EC582345FB647D2B9B9DA4EEB794247629AEB31C76582C71C0
AA8FAE360D1C771D945A653446EB69B24FC4718356A7E83A2FE128F856E462A8
99F303A1A116AA4E54FCAE3DCEF3EFD461A0076446786FC28B31979C9386BA8A
55205DD7A4BFB481F3F7FFA61B82C6154FD5480E88E9BE465AE6428CAA10C5FD
83689CB8933082C2D413FCE95483E0C72B8B7F8EAC363D0D3E242D801F00D57A
2FB16E7B6AFBCD276AD9E679518112B29E242B2119781F3AC752D0D7CBD85A44
3B627B4E5536D6AEC59F9D8D755E3AD38B4CE7AFE6D44D6C3D1DDDECAB56B350
F7A518604E82C194CEC51994DE5B2645C569AFEB72671519717AB93D05781161
9050D2E75825661E7317AF02F3BF778C4677CBF5AC749E63CF4A22211B3D7195
E460138FB28D0E8452F2C5EAEE11A48345D7EAE7758BC2A002B13557B9CFC940
63A7E36FAC1C106CA3CB9EB6844BC8C7B0183F65C502F7B1F4BB722DA532C95B
A91D113AB606DD506FE5ADA8FDF409DFF33F6250829F441EB15BBF911863E85E
7D82DBC768B1B3807B44B06259A1DB2DCE5FF09BDFB4AD0662F254AD831ECDA3
3B8BE32548B81B8CA7D9B0D714C16BAAAAEBFBC3C503769B03444CC61D2D39A1
BD769C7515D316CD80896DF57CDF57B25B451B3830B7044C4D6FADB519EF69FB
59C7340A64DBB97889001F5D67C230A314F81175660A6065A1901415CFDD068B
139CD0E14093E029A7EAF59E4BD57A28F6AE8A28324F9A6F4FAF0129BA45D64E
0EF77C5F8A4984865C091C320F1F6B56DAEA3577DB2090E4B10858EB978C58A7
633F5B7625F3D60C465FCAC8F4EE3796E249E401DACD9ACEA6DB567FF34025E0
8250F2ACE47BEE26452F944A48955FE377C69B0089A2DE88DAF425744DBB4585
76C4DDBBBD819DC7F88B1F6D04CCA5E70934685EDD635F69539470B2C4B4DCEF
2DDF412C6B452C3BC520AB084A58633A5F6E3E88CAD3FC4E051FF7B2742E470A
86A70C0BDCA70F2B40A87F471D68361882AD1F280040703B3FD37AD2CC44057D
69CB5A6227BC1037507EEA68A50DE751E15023A8E4CB02B8A7177A678F4535AF
D70653013D9F27DC95DE20DA064988B0D8F0E61D8A914602CA1BF399CC234873
0C4A5DDF354E282524207B77D0F0B7F1CCD2A6AB9004E2D8FA251C841AB24865
72587FAC0A43C891E913092B13AE9FC0AEBBCF0AC664C6E9EA43C68049AA9821
7BF523DD06A2039D2837184516551E48A4CCF1FCACBC3348C07EFD1648FA3025
EEC7F2228CB1EFE8924ABE34D591856A9978199F648BF02B1EB4F9C0076132C7
FF4F32501842F35337FBBACDB8A3BFE60E769BEAEEFEE6BA375ADE450623BB1D
55FCD116071F0D86D5B4F7D6E6602109B88A7D77BCCC801B687365A3EF2D85EF
E6EB4D6D8349B1F8925769A44FDC79631200509B38704024072C5F909E383B25
42344D5DD1107325715C5F7C10A270876F9986F65F85BC040258DB2EF43131A9
1CCDE24EBCE08E0B3535EDE304EEA6A426ACABF06C1622B698D4CA58B234EA1A
30FC2C52BB24024F52C350AB92FEDA034867053A0A40E45660E8123DD9C0BD89
68838BC45D8FC0BA22D87DACB034420ACC5477BE8DC7C82C3B0C02196441DAC9
8CD48CB4BD9D72B97BA4CA19006D1C42CC5BCC711BB98A176E47A59DE2B9713C
16AC3BEF2DD97CC9DFBC38B03FDDC44827A68171CC804621DCA5BDAD410B4123
EDEDA57439BB9BA0388D20B46867F09A0AC5592CAA68C5CD5595CE8305D756D7
4D581040C0EF7A5634CE060C6CED224FC99A16750FECC6295995ABAE8EB604F3
DC7AA1FEF8905FBC4843D65FD2EA838071FB0FA77F3BF63C7485990D477B77AA
0C0514C94F91A2514A9F349169F1AA52A1033760CE12CD9EDC4CCAD2C44EAD9F
DD53A581B6EAB895BA61387588DB736873060AAFD533EBE8CF27E062331D6CC2
0A6F5E0F9A586412C62DC7803B23B0FF95B597FE2D2211C609F17FCE52C96748
8E02E381F1DAC12ECBBA9A16205922CDFD752BB6BB43010BFE4B199AD3D03ADB
2FEF98E0ADB0EC105F70BED7DAF315BB1219404CEC85B88192F1FC1B42CDAD69
B6A296528B679ED5DEFC8990CFEDF910E192A170003AAB80E1A3A0A8201DCCB8
806FF3C92B4B72B29E1F4B637D2FC6B2382527F2E1DD82DB08E98B2EF0459330
77F5F32B079A29AB3346FFA0509A22E5D40F144F1155B7644AFF61F235D17658
47BDB2600C74E69A147E7334A68E2F469BCE45EEA4CAF9780AA2A4C4D6A35CEE
91B94541B5B43C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964EB7976BDB0BA9541C3D806BFA4FB77C
5EBDD889F9D80B15A0764CB951D16524B621E0A4FA9D6F6F4C619646B14A25BB
40D57C2B958845B8788B60E408B6BD71BFC42CC17B0608329D093E1F9990481A
E419883FF01BB562BF7A8CD1C6CD40BBB35A568667C04C5536562FFF26C1CB5F
D8E91869E0A83A55638A573D81F89504703150AD673C8CF43B1D23ED27CD5E59
41D6326BFD00F8E2C46B4C975ACACB7A8A5A254A978CA100066CDE17ED245D82
EBD6D8A0E6E054359B579CD2E0064E5832E860F937F033783A442321927A1A8C
787CD363A398058AD4ED21814D5132E07D93C5A9B27F2B44615B72C93110F533
73C50E14657ED09FB27A350233112B0A339366B7373CE058456E0E1786B34190
AC06A6ED10305E09ADDC767335712B4542DA438A8FBC0A878608407B9211298D
B6C4B86449F9B3FA083CB2173152213DF47E7D07C329EF198E85BA6F03702324
345F9FAC6FA427A9DBF37C658288DD57DFF41A774A876ADAD1BD31E35F8B6C2E
FB81CA292E7C5BA6FB7CDDDA4209003976BE52A03A79C34EBF5CB4B9CEB57DEF
5C10691790826E35AB391A694D529730BAA8F75C5FDA4DBABD057D3F46466673
C2C816A836D1E36B99D07D17819B9F91B8D7347DA871E40063D57C1CAA5CFD90
04575AA9F1AB91191B962D64D82CD86F6AF3F1381F095C0379AF1AECE95D2547
CB2DD44ED0CFD23B1E1537ED3C83D34C8902ECE3FA1653EC33E4D50EE9329A8A
AF407145849ADD29773753BB577FEC7C1760D468320A79C6A1C23A69A87B4E59
3E92607A46259CE64EF5F3106A9747916C0BC2C46B83F574F370790FF793AC7D
7C48D9037EF31940A9C87DC01D4A88DE2D7515B5B6390EFA31A44589BE79A66E
6C292CFDE3ED8833DB255B8FF933A3F8EDEACADDE0FDB24B9AF2504EEFF2FBAA
DB48EF0D4FBBD2A0B5F8D89AAB7B971CC89C5334AD9996D31DF10C07AD641F24
AB4E8D98CA9421505EA0116A0876149EE60107620A89C9A3C8D1BEE4113428DE
0D55B98FA88D7CC258386B3D492717B438C0C74ACBC372F470DF8F35D6E5763B
312979604965F45E22266F569977FA7D7C2E62D9318B033223A9BC848420D62E
3111B09675FE9EC168A340DFDEDBADC1EA404EFAAF8B6194BBAFA142922EB643
DDEDEEF71A8C3865120E0C94D45E979D8392C29DD551188112A6AE98DB8CC966
2BEA42B9B6B8BD5ACAA54BD90BBD4607A2EFE01AF44913B89B791C0705FBF788
CC8A140549F78FC39DDD5FDD4700A56CE71FAACA472DD4C414087CAC63717C03
A3BD2215FE1427DE6E2BD8CF609735E847BAA0635F39A4BBC987172D1787E014
981A78A952644F5EBCC01A305C08EA4625C11416445E836DA7A3DE9A5C9CDE1B
9D487602DA79C4E845D5BE3CA6FDC088B462575052983010A2EC593B475F94A0
EC13432AD104E1E588A434ED028A2F301EC9B98B537DA47285A073A818373257
7DE94ADB70CEB5E6713AB137AD851808FA65D21C48BD9202CE0D5356AF6C40EA
820653A500302F0411B5ABF7644D03E17F39733E90B60F0DB14DC64C38FB8A97
C0BD6AB5AE1B5FAF5BEFB6A168497DD3E1C0933826D1472CCA9CAC4FA61042BF
B953C5AA0EA645772F1E38F523455AD0219F22C6E5E6975D49BABDB8EC50A3D0
6D3366B8A9C7D5BBCD5ACBD7B86D7E1BC311C99F108D54FCBE543CF02200BB9E
6F1B1B21FF80E30DCEA5F40F504468056D96AE7E0191A21742CFA51BC826BE28
4AD55D76AAB3B0B477436A6CE794BFF0ED77A7847F7CF4256ED2C90961ABCB4F
B89BE2D0D207C80CFC47E1922206029590608C6420183612DA9CC6598BAAC380
D6BB40A876D2BB649A5C2137F736756DED63CDAF5D281C0B5F2BE9E890D51816
AC91DE8D6D8F93A35D8AA2145E0598557707267CB6E58F6D9CA6F5B88EF3EE14
0C0F8E398980C7C6DCED448D1588FD8922A47AD1FA0D16BC17BE4D1495247B1E
C6579E3121725DEB36EC7B4A482E97B68B3C6F7239B54D7AD1F0AAB6C7A4A269
4669C901D7E46F00277891B9231F2831C19E73CF8E1EF3F81C1626E392D4B1DE
9A318360B9CB06F8F917B354F1D0ED0616289C27C1517263C2C8A901335B7753
AB510E74E9A2E37BCFACBA21221DA50567A45EF2E120FE3A811ECA081A3D0478
D3420B503563CCED8163121C1F672C14EE66ECFF5B219E8BE1598540175EAA76
406A0BB4DD3905C314C9262D553D7CB133CACA87F1535FEE6EEBC67F90818206
B95ADD734EB952C3415855EAFBEF4701909913270E0060FE23E1DA9A96CC481C
F1E7447E0D7936A4FFEE97317843F64743D9961F5F0B5A7C984B6BB390F2D2B7
A4A7376D231490C6836957FDA9D7799E5ADB6844A46FE598D19AC35D7FA92073
5CE37D8AC7115190CBAFE8841364D8DCD31B3D5122C8661BE65734E463102B69
B470A6190039BD94F2EE7972D0B24694AE042C8C9046F1ADBC7E9F64BA5B13B2
D3DC8707A8D556B16A79371932FE7BB7FF36389A0D65C454BAF07720ADCDBEBE
DE2B2275FB0BFD30DF0755C050400A2697EA21C97B9DAC9C231977BE978EEE0B
7A3704245DDBD08FCC0DED7F3E886E0206CB52BA639FC293CBDF7584CA269DEE
1C97A0F984F440B9BB7815A53B725661B27F5EB9C425CC1D2FD1DC099F780350
93ECCD7AE138C5AE0FB4F043144C9903478B4BB53E4EA9CE571B9871E0986884
51E3C31189183A62A2EC5CC2E6A672FE540904D7FFF20A101683BBFB391A8FF4
70C147C6813785426E50436F7CBED5E49046AF839C10ACC0ED47355D0FAAB8D2
509FD9478CC52C35F034F126393B7E62A21938D2166FDF363FBE20932DE23964
3456C3A198505449439794DAACFC09D88CFBA928D5D432170FBCB19B4C29CE1A
3D849EE85A0DA71350E6329ECFF1C904A94473322298534D5CDC3EE499B35288
A3D966999F260EBB2C2B7FAB368FF1A3266389B0907B8562DD08AA56021CBDF3
DE1C1F8645DA03EA729468D2EAE72FB04C6D2B4416E3E215FAD05624386895A9
7EA28B1791D94239667DB145DF8595130A44E89C39D2DFC5D3BCD8274E2503A2
D9FB123767F732E7BC40839603AF3DE5A65A1FFB5B46F4DD795C6AF904EF2DB9
9A4D2FF56D5D797C5209469456CDA0E8BFF82F12FE318DB9E65DC2F3E2A632CE
F071032FF667B3A1F62328B34FAED0F5B9722DB2D6F514E8C4C4BF3333DC0A7D
33341F627AA355682C977185591ED2237DF1592D73E3B8C51099724F9157C136
735CDB7DFD57D62B513FC5B63D113F7F0D00B0C41F93C548AFC465F5E37BB0BE
7571DF990F78D69354F116E92586DF8E30B2976991A3B77251DC0F15B0A7E82B
523AD187A3AE44D93FB7A0D5F3674C2359AD152CAC44BEFD881CFA38F31499DB
2BBE8FCC2556BFAD8971BAD3E036F15442EBD1557B0BBD97F0024189BD08ED10
558604C17FBE7FCF01EF9FF989CCA3DD4237244CFDACF1D190103A64E569EAB1
1EF3D3C7E4EE38308D20B6D91423D4F417B38E66572D9109520A371D9C501408
F9B9D1A30E09A7EB286EF0378A1D9E27F29C68624E863B28B2E7B4C3C38BF32C
CDDCD4CA025070AA646DAE4B889B575E8F4FFDC234D726EEDC3E7131A3049A89
BAAC98C00DE2278E989D877D2C7F808C2D7974C2E43250664A4D429A915D9F14
DC9577AD31EA98A51A1DB9CB0EC09492777B3810FCF8471354D04CDC1F08BDA8
FB63097109E771AB92E0198C9495D378DDF5E3879446BFA1B4F06E2C329AE0BA
4601D3607DB7466631822AF1BAEFB301E6900AC2B65CBC26BD9497A3B908EBE9
A2B47EEEE8018439FD1AEEE194EC060ED2476275D5384C43C08BF69E4CA44F7E
2A7780F6C88E1BE994C9B91DF4FA10FFB4FF1570574EAC8975B14588128A4F2F
6DC7A1758B036F6C2E48AC5C1E930346F7CCDD0AEF1705407B94B24819D3B17E
F3799178AA4E926A15A00063146618C8D2F36115E1867B79B61186AA832CA1BE
709523407F265666D7579BB8933FBF8C116E6294B75F3E3F9C620B59788EB9B9
FC1432C6903DE4B39EC952DF960918D17891CF1B76A76C2C64A87D5D014E189B
B9EB0D1DFF54A93A8DC14BE07A433D04CFD43A54A673FD23ED95145803260D08
7647FF55993A6C45E87431AC3549F382409883B823CE9FF4464500697CEC5C83
1BF140BB33970339EA0DB212ED3410AB183C2EDAF173F0DC106177F0F23A123E
4C539DF69555C9B7126C35A129D8B88307327F79156D6C685EB8A77528DF8313
1F02C5028D0F35B01F0810749D7DD98100BED879F02A81987A68453D1452EFEE
1B97A023938F8BC45C2E6ECEA957F5A825925463C653802571B320DF9DFE3589
993997CE0F1D799465DBFE4009BE6FE861BD920A19FEA255531A6A62C379993B
DB9178BAE43920E3AD73ED8D6A74D2789379B0297207C811514599AA82119E8E
EFA304677858F156E9EAC6EC03872BFA8D9CB1975BB9026B56FC3F24FE6E6EC3
01C670028FEF178AE85EEF9167CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC
775773A60B53D4B46DC4CE9B9FF1A7480F80EC4A1788BFF001DE4C2236D33C44
7ED04ACA9DBA348076F8E2E61CF29780690190D2E829323F3BA9F7ED7D399CE7
35A6A51764CF5E131CE693731B0C499FCB8CD67A6E7F7A04BC64ED1C8DB6CAFE
561E8A2FC628B5FB42044DEF0D0FCA179322EC30767616DAFAC22A2B3DDB4912
607C200780375606E7B763D701554DB8626A77E47739C769CBBFC9865A54F234
66508FEDA251C87F1111C25F2F8EB6DAE7A19255CD29401777494930135A961F
58F8714232A115392384B5A41CA2A7CE42BBBE661B4B40F59E4D372461555B0F
22DB7DAB1895D9C7E6D3297326D6AB654464E3E70ACA1D593C2CBB0CF1386B59
B3EA31C285E803A4466B47E2F3918C4365A348A02DA99C006C44777716388AA9
87B2665C366918880C3DA0E469D3509EF0118A4E98E17F6D7F9217151E8415E6
2819174A53C38A25519EB9A98EBBA5BD31877A487B252B5C832E109DBB9FDE2D
D6A4C645923DC29F384171A48660EA36DCB2D93694EB75EEC0AFF68345B17B82
9686C23D1E397FCDC2BD63B0A24FF7C52E96937FEABC99DD65CF6852F09F53B0
87A3E5283AB296939AF66086E18860B42C4645616799872263B1C363FB283C38
F0AA2A2004B7567780B795D46FB19165E0119C4359B471668282B84A6E6BCBF2
83C414E8AD6781F12B0F797290F0F4E5C03F4C05E63F7C7FE280E34E28E46B44
89C40D4C896445B96E7BED0BB864DA6469A9F85E1E59A84A6DF6B2EB858CA450
0976BBD5D5EAA001677BD081DF18650EF53A232A8C5013F4D50967B5140E02F9
E0CEFFCB4367B05CCBE5D82778636F411B2B72CF35172587C13265E7A78843F8
0CD719C44633862B102690C1545ED87773C6B3A8ABC8ABB13ECC3B249F1878A8
FBB90B6401B507B92E99DFF7DB2A6AFC77F1D7F6CF658032F8672E0E0600DEB3
8A0C2618A58148687C5C9DD69AE2932074325629DBE7BF3642EC9C7BBDFFC7AA
A6EC16C797B31B0006D964EE87B70841BBB0011D86ADCF5D118DE26D1A1F383A
2E3003317B192D35E8984EACCEE49E15DCFC537A774E8F036EA3BD1FB35B49AA
A6F5A4F21347549C1150C47407D2FBA6F34AFEEE271FE7E2B6FD928FF7E51CBB
67E70B290AC88D73F9CEF3648B20C687D77FF83C5898C718A1E73AA063486F3F
CD61CF880F6B9A1B6B68F3CCF0B1836A57B850BB9A806FB807693E837663D92A
3DF30AF50B62E4ECED90147C5AB8EBC973CD8D3946E50D5357E57CD8FF42D742
F39A7AA01C8B3074060D1A0C716B559A93FA16FFFF44DE8B99D6205FECE23D72
A9F61619E09C929FDAE02B4CF803672EF0AC1A4F76C8B2A035BFA7760362413D
7C9BCC3D58D6FB6BD665CA0D2C509270C53B5EA63F6D10265DC205CD8FFD81E9
0B3540C81049C819D1050A62F195A3051CAFF0C8404B65167DFE633C28A2F142
B856E17A6EC6EE510C1F0AB90A2297A6FA436B5116D10C6BCEFEE8139030E52C
13DD6B11A36BD9E98190CCA9EEFD8E5446EADB4DBF704DD1B3E7306BE84705CB
003C7EBA17035392BF285968C0DB6DDCC48590B40E808537744BDC081F40E027
E9A5005DF162A28E497C231A0B0AACA7779C204DFED7A30C3CEE434832D290AA
AFB6CA80087E8426C618F35939407E71E8A81EDC28658BCAC46B290DFC519741
D3858AE267B7F82277403C5DCEFC2A5038C96B8A9FBFDF25D6779971EC4E026D
010AEE32EB6A06C29075FF2BE551E14CCB2C3DED39E4BB878CF4D26D572D5973
33903328DEFCBFC939D820A970BB481EB62B5A8444D44E87D275D7FAFB371C31
D79FE5B5ED27C47B7BC864D52276BB967CF618433020670592121CF4DF75E6E7
F636E36678B8EB2B2CC99B33FC7A8B194070BA732D56CE2E449918CFA0BD6F36
15B632568E0EA67288F7AF12B053A535DF12D2DFA60982CBC90F930688C94329
B65E14F0617A0877BCCCE963F89BA1451FB3CA19D27633943967D45F730CFE0C
2768667D461CA559EEC7A15DC14530341A1CAF938F8592C6DFD756C0D6DDA4B6
82C5ACBF9965D25203E5BEA71FF2B972E2D21177409B07626EE46B039C4EDE4B
3BAE81FE47D86AD37AE081C6C5FFD28AB6F49B1FDBEC0F569031CDC00A227099
1367C2B10DE344349E457FFA665A46AD11556A9F47AD5CAE8B56AAB796E5C554
F4EA2AE2FF56014216ABBC37A0AD2B5A7187A04AAF44FDF04B0CFB2F24C24ECC
B0E3A458B6A64C4E94251295465B2D3A111E4AE90D46F1A6FE3EAEDC5E222FFA
572AD30B951B641FA734C987AA6C783F03CFD0BD479303CF3CAB8A7CA381AB5A
0384449C60F3766E1D58388B137C7C2A920797DD4157CD823FA597447627009A
E64A758320AC65513B3D4B0F757008B6FB506B0231114A3E5673BC1C22A00A03
EEAF96BFD849C4EDB9EA18273257E27877CA428C7C71FCE5AAF915AB48BE911F
483064B47FCD855A8966B52C3A19A15CB67C3D3C14C0F06528F9391CB4A43666
D0E8A4C13B56002A2DD5A5FE0134C4BB9A4D361FCB02C3BF7AA116B5539455B4
D778F3CF4A6AB36D20EF6457685570194FFF3E82C7FBDB6F4DD8BC56EF152CEF
5EB66D79C82CEBC1108C19CDE0D7F03EAF49BE166BA3DB1BF765EF0305CF3243
403EC4C62D25B1ED563C248ECE78A971F4AC9975138B38579FE7E7B9A29DF26B
7CCBDC5680292E5A05F03A121970E8F1633C58C6C2778DB1347BC022D0E2FA10
D86AB5C6B4B481ADE2A8040297C80939840A16E3A746BF5FE620C9DB575D318F
025FC523B81E16B50581C1E023B5E02F4BDAE14C5B2C6B6ADAB369C4ADA9783B
28C54C4E177CEFE4C58D836493698C04C678D81AF9A46AD130B06112C4CC70E3
B233AF175A96EB0567959BB1E236626AAEBB939F70CB09CA40A21CE46D1EE38D
60996CDC72A0FBC24A7050ED3E7841D6F2A77C4632EAAFA8525DA026DC1EA8EF
D2C30BB9D744B202965DC3D620232885045EFCA1034DAF2DB898D8A086290E45
115C8DE9877BD43699D908CC3F1B8384E661A40036AF14D1CB2B4066039D0F87
5F6F3C8137FD175C468DBB7DD83111643F79DDBDB350A2A18E0FD974135FB2AB
53B5B4648FDE13AC7920214B34B58A549D32519C5D9178BEF49F6185CED1820B
C8C8BAD838907339BF36DBDB4FC0910DE4D3C078FC13D552DD8708B0DBDDB463
75F63FCF1F58F13400D2BFB8296CAC6F1B2A465EC90AA64C6BD5C4A03C09921D
3F83DAD86DAD66D3EC9333D1DE46382E841BBF95A07528C8343292E178983EAD
8652B985D89C0E713F556814E051C6CEFE7E83C2F379B88C0A1693BB33D44602
2A4F9B9A418954A645AA0F6D4DA8F880E5C6524D974981091CF787CE9CE51D48
4F7E4976C4BA1C110F70D776BB12E71B9D621511E0FDB61D6BE0D43D699D9DD7
408F16BA69DD6FEAAD3CB6807D13251534DE1386509692C2E2161370940BA53D
FA02A07351BCD8C95F89E653EA5D589F257F3B177FCD274F8F6B6D7AD5E16EC1
039ED26273E79E39FF03C8DA1A4DF6C8B7B0EA9E611C05709D9CCE9EE283F4DF
B79975EAD0E341B382DE4540CE5E663A6F3DE864CFD51444738A0D95D1808AE4
ACAAC618F3F16299CA96CDD55426B07E0D6E591ABD90B651E24464F80309EA07
DD04E74AC5D873DD414B29138A74919652BDD053FFE1204E7588D287FEE615C0
61EB1B3984BAE5B41853C84DAB15C962534AC5130E87700E6D1522A7972805C6
C1CD07055847BE61B9B904F2F2DB5537B2139A0D8791BB855BBF53783482EB6F
8264278EE8DEEC7FC662CE4F3167F38C3D106535534A9ACD6582F3273B6FCE97
86BCC3586CA953EF480D4620739410A5F61035B90981181192DC54032651E305
8576517BAE6EAB9429FD359809D95A11B3A26B88CE0DF9B0779B4235F7B5C9D2
A113A8B6A59568307D70C25A090D4AEC9A71563EDA990CE3481E7E574106E677
1F4A5F8ADA324165EFB0EF200E16BA13E4A36F92147E38CD271718777AE53034
5C43C74E88A8A1E527B0E77BAE62868382DA75973AEBB7236B120EF5502844E7
50853317185E95A7C250D459945ACDCC8DA70D5339C919D9954FE91E079DCFEA
12E1BE6D51D46599D8C2DDFE94A2105FC2D898DF5FA1E5A94867E63CC03ED3A5
C17C70BBC9515DBB6667A7B772523155BB827311033820B0380F65B3AA4F3E83
7B5A92ECB4DD4B8C7DBE9B8A3BD00614A35B7BD9E4187F68C8AF448E45B09267
39D960D4920A692FD967358CAFF45613A1812AE6DB4A62146B0400F245DFF3D8
C391A5FDDFA9D9A4100198251715AE46CBCC7DF2F9BE6691B79CE6967EBEA655
522246AA9E837F39F1999BC08418A54A12B62049509032903840182F35ECB419
561B2C36D43E3102CEC57B8A58E46532BC2C3F5CE609519BAE4A852A3DB40FFC
B37C172B66792ADA50A6FA842125BB44C446B18804A42B5407B67605F58001E8
F77D69BF9D01BA23B36EE11CFB793B195BD4BB9ECC11DFC3B04B9EB22FAD6B16
E17D0AFC5974B91E196B6DF5324DFDD018BC44188E63C0A55D28789356455621
75EDC8F14CA5E94176E82B20CEF9DF0D0AF356487ABF0B563299A7E86BD65251
28EA76A0D7779A5031AB41EA07059ECC2C13AFAFA8AEE419D43C4429E93D9208
05E96332290E522C15C1AE0CEEB687AEAF0618554EEF9AFB7A50AB184C4D6646
7BE1397F82EB7A85DFF7FEF08D762E63E465FD2B17BD2BED7CFE5F7B103347F7
19C0848A1EA0EC028B2A574578CF69EB3451FA40ED22C16F1B8DFE03EDD38AD6
A57D3251B528C31379673FB1529A9AF9791A4C424A2874C0D00EF8F4EF7C972C
1D2FA4728E5977AA2B693A1D4A0EBCAFEDF511A461E4A4865CA1CA04C0E671E6
57EDD876C2E70E8841364D9C8E8A7E042A23833D25AC141FF1F6B705CA7C0B29
FD60C8D9E163ADE6A55284AD768E7F1F0F0D46CA4E95316497F6FC73DB94CB0B
79AE05AB671E84B03B82D688E3D95DEC15C86DD8D10F5DA77AFEF7EBE3185845
084731E3A0890C4632D8F9D8196B6AD43E15F3322E36FEFA77D26C34ED3323DA
25776CB7B9A33B04D6AC47E4501C0E3AB6F8F05E218AE28AFCCCDE87BF0D1726
0A4BCED8D3532340A46A1177A2269AE20BF8CBFD7E517982F9CF0D4F9458F982
8A664B3986F774A8E53E8EE1BE623EDD5DAC3727821536472D2381DEA09B8BB1
F73E691434A50D33DCA5593B6AB680AE19B2231D557EA18780968331DEEC1ACB
0FB8A3AF9DC4FED3912AD23C76C97F952DC8AE60D2EC08F0C85E2D35E33B794F
D8B021734F471C65A0A2FFEE1BDED30D4765A1F0230730155D0AAA52A966CCC0
0D3DDEB150C344328CD04AD0D8083E0BE447672358DB7D34B50BF2230C7ECF54
90C1D4AAC519D0313E2B371F7131209281701D60001C69A1FFF5732BC1E0076B
11804BCE07854589C4BE84B31A81F2784FE0D5F242F5ED8508E1CF87641178AF
DAADDBCB87A95E0EB45F47522BD93AD903B2EEC8D3C188F08FF2AA1C7D960281
98DFD7488D907A49A5C52892ED6171B0E25FC76AE99EAE915AE520DF86C1A46B
EDA4208F9A039FC53E8D60AA215BE167083176AA2E3A947DC40E7CDE4E907567
9A5CFCEDF130FBD2BD67D4FAA2F3929DFE0F24C3A0EE301101D63EE838986E89
EC302D38D6AF6612BB83188C479E48F8091E557FCC0849DED89E335BF17474BA
AE04CA1905B3762624A568CC911A30F214ECB87D0193BA0B6F67302D4801A736
D187122C5D1112E84725B12C2B93AF43FAABC38C498A1E33FD5EDC497CE81BA4
91CCE1B2F223FF6AA3E2CE0B28C3575F8374B2AF87E99A2DADA3728C9E3E0893
C478B3F7443D9A332101D6E98E963E32C1C000CA13E1A1CF2080943CA932CF05
5E41018138EB66FB67C22587FC14898051C4FDE207F018664693954B4833509E
1FD137D8B823953AA248937D59F2D6177CF5F25AAB7D45791021199BE22D8994
0BD35FDE81EB8BAC342210D5B0ED5550C4B54109A1B5D3696116BEF7A56B29B7
FA10CA7213829FCEAC430A54AAB1C77B24734D53B271D6B57F53D5F6B85D40FA
4E5913528BA06352384BB5EDE175FC7E481EF74C90360755DFBF7D9F9FAB94F4
AB4F1298FFDD276633AE882A540B806AB247982B2064115FCC2C0B048E62B50B
F64A9A860C3B953BA836E3E7313AE910CF60A7C2E6C17347900DDC598E1A8BC2
5C0F1007C1522522D8B549791B596E5804B7F90577F737DE057751F66170EB54
C1D730D4C7599D652F2DFC322AA7F265EEDEFA3B5BA9987C43E34B7A21AAFDEB
8EEF347B1DE9CD834797E610DB536D76C9184F8DAC563B375A47797E0F0C40C1
59093A6C73919A888BBD53BF4899A3D67428A633DF53752834D0B8998C31887D
0A4C231FE009050FC2D29D0327D95FE84E9776C18A1366EC96004C09C4DB5790
7457AB1FFE65DCCA47FBB39347DBC337F777DBEBAF006462A565364BD1C64F9C
1F11103391785005ACFA3D838E3DCAE83730B4ADC061318FB738328A4FA165EF
C4B59C3BBD5111001519A846BB83001640943EB2E9CF8202D34672B6E55B3C54
5DC01F32A7E2A199E9F45B099DD8A7DEBE298B7883E0DA25554FC82FE4E94B90
0DFAB7D97CC0F998B96AB3E3E182E29B819FD861E52B04E00AA389893E477F54
3893AC88C956283FF7B7628DEDC302E0E830C90E221969257543026AEDC02C1C
B17CAF8D1D1E869F0A3EDA5BBEBF135FBDDE4099314E3452D1C3006B69E562A1
62AE5CFF0CDDA4763AAFF2692126B4FADC3C4BFD139E015E0D1D3591BE5930C3
56E6B8C1A4F0AB29B1EAA43FE53F100DE329F2992ED2DD8BE4396C900A787F72
8B417168EE9C32721CF77B0BB8F785CB0FDA4BC3E04966334402F76388AD6AB9
DB661A04037C111998C73DD8F3EDCF0B1F51A01691E505DA03AB3799AC2758F5
630E00CE29C4EFA9548CB450E12BC8B4BEE5E7F224860A47751DFC2986440D71
6CFD5D2E9A57D84846762E7C7940B91077B03D7B7109D7E208791B387A55FE59
88405433B58091194908791602C3A6572740D8E84B479A9CA5FDB4685C29D7AB
3515C06C70450C9B1085CA881F4162D5EBF5239C62338F7EB882C2D4CE53D9F7
ED759091062E1DDCABCE4371C20311C018E4CB5C55AD278CA8D5550ED65F03AD
74393AB3183B6CFF11BA62324EC334B969B3FFBA35EDADA4AA78CB9659AF92E9
606476F8F8475D52E2350677895DC6E3EE8EBFA01DAED85125E5FAEE33B56AF2
6E3552AF8A5CD10A347EC239B465BE0416FE1EE4BDA71618D70740BBB31824F9
36E80F0F7F0D395E15943D0A90F2B930C579EDF743F2C4307989BBE10C6B0BF0
A640F2DAAC77D9AE654BD6E4359A140F0845EA7DE0DB3C13B8C18440DA54557D
A4B62DD372DB1D4D77D17EAA35BD7DEF5A54D050720CEB18CF86A3D98D4D0B88
323556BC8C21388AA2B223E95401B4A1A3DC32DE58928B59A875DAD61C76F5CD
D4EC5A431AE3F97BEFD291A0DBA52EDFD3A216173C3E69F47405B956E7F91E0B
F038CFAC465E3F5A9BAD0ED4572921C8A758DCFF0990ACDAAFB55D94C91EF75C
46CD9EF07F9D957AB2A2DDDF1E29A315D0C14B6EBF8A741D6182E270D23A9037
3A232F85471EF05D091824EA3E015C7CA599298F00B4BE7E8128F94782928B73
E32595B2F9E156D2B163144E113AC272E689267F146C347548D2DC4D9FC1AB57
55892A6126B8BC8E30EC6D6E505DB3163C5E135D18B4693417BC7BCBA9B9B3CA
C716FD7A8B2F7B9B62EE1105F37A99A308E7DA80A3018D0AAEC613DECC7E8ECD
80C062933B377DAD8F4CF2248363BDC157691AD5BAB068DFDEA684B3FBB7DF2A
7921D5760334AA91B723A3FA7790B2A93DF324554A3E1026FFFB8F58BEB06237
B3DB1ACF955AA10F59FA62C5DA5A3BC1FA0DFAAB319D080F4B3138D713933F67
669ABC9EF16FDF69E65809B7A1A509DCA9FE68F412B44A1CEB9470BDE4DBF293
6E063A86DF51F88A4A14DB003C5D21197F835B183FDC1269D70A0CDE6B62EFCA
1E621ED2A65D66DFDB2098887BC845E63C35E4185C378E7C7961340E39855117
7A7D13B2A9214A70E461A239212F05BA154584A312D0DC1C199035B90E8F7447
DE1DBB43878E3EF52717811B1078CDB36CFA51989CA4A1A08266ECB80F3956DF
84FA5B7F11E4344AB9FD5320046666AD30B65C11C377B8756144A925E5C17D7B
3C0A3FA070003AAB80E1A3A0DAEB44ED7329F584047744C14EDA3CF5F68629AA
8BD94DC0BFDA6BA503A1C87CE054A286AE91352C3989F94CD805A3644644F435
247DB0D87B92E5191324DAFCC57D7877B959F30339A929F07748D5CD27EAD3FD
7D4EA73AEBEF22A27A1A52579785687EEC8211AE20C71E898BC209C8A0085FA2
A18E0FD974135FAF416672495357CDA2E31CC4C71387727262E883CEBB5A2F39
A7E4D9EBEADE7753692EECF0E9D0EAF3369EC3D51CFC6EE4BF55E9E0655C6ACE
17FBD14D6AE51CD4083E3F77B728F586068877DB8E9A56CB60DB222B5000693A
A2C4AE3B201DC3B404A11B5DFFC7D4A45AFC59703335FF10C6376AF8A469402A
DF9A82B84ADA8D8914441A585853820A39EBA48780AEA876D6CD19F920DAEA20
1AB1F351821CDB37B340B90DE0DE8AF61DF4CBA24554FAD403912C3CC5005C4C
88CCBDE663AD5B71877EFC29D74C4583377B646265B7435682D6296AE76BEC4B
00E81AD3593D9A0057A94E1B632172E826ABD335CBA6ECFDC575B41DE40FC875
0F31221B7C959A8D33CC78F9010FEB3B1F5831D7693A284FD65AE53B54DA3B53
BCA98247C2118A28BC5D4C4BD0063F34A60D11D61824D760F2B863EE3F7E0588
28A0D7677408321D008F43ABD98ED270810738685FDC1ABAA8B6937D9DD362B3
0559861BB442B9593B95BC7A249E412256F9A46B839671777ED1D9B162A75D1B
6A8A4B4DFADB168DCF12F80502835E8C49B216B6BD69664F223EBC7604335796
96CCE1C77B132B56BDE9D73D871238C2C763BF8D614440B1FACFA83BAE828D34
11D6135073EA9D4806A58607EBA8FA721F2F87592330D621D8C961BDFAE1AD42
E8ABB3CB76F5E0A457FA5099EF1D4BC6F1C104924CA8BE2D765543A652A8D9BA
B1AF2A848D5115EF701FD186E7EAF6E26F5E07AA313DA22FD5C34F7EA10791AF
906EB3A5C809A86240292A654AE9F7A8A4D66B2F0FDEBD7FB2DE8F9D7808C441
AD5E71F33D92E17D69930FF6FFCDF526A164387587E114930F6308768C621383
679B83248C3C8C14A726B5C776B738AACAC2FD1A29623CB1BEEA79999190E7FC
D33F62213684AD4BAB2115A1B1CCEFDC74ACDD0A59B1FAA5D9D2709E825D5FD0
2E989AEDEB6ABB06D7E96F54DE5F142762642747B88230B6CDF7A5F2E1DDFC6E
6EEF0FB8DE53FCC0A3ED88BD86DE9A8A63CD749FA1877E9F244F16B2ABD85D84
4DD67AF0B571D380621F52C41C6AC8D1E325C4F1739B46890B36FD38822203FC
EB2BD036CBFDE2E6447324DB5C11B083E17AA5F20FCCA2F6E606F5522A5A2EB9
CE0D73EF3A598DF06D252F3AFE91CF21BF71A9FFB3E8921546381B6DE424FA72
F3934CF7CDB252C8651E83D878DBA38004764710B3FB34676291888F0F024209
E077B3240363ED1CD3F89702AFA92824B3626C26AFCF71521FE567B40C70AF28
0F19DCE95AB9864F5CC3C0F9A24904AB7BC240D5AC1B15DAECAAE9A5E4E21128
B5E2EDDEDC8CC7B2D19CCD566E14AC6F9A659791D1CBBF29B5725D3B04DF81E6
A8602D64137E8D414A5EC9D6EEBFA16EF03C85932525DED921F0A65A576E2608
382DC682F359EEE40CBE18E81C8FA5A86D526D19F9B74F6344090AAA693E5478
7D8AADCD3195D1FD1BB944E90294F4C9FF6B3C2B4A845BD4E4BA048653C16BC6
D6489606C478CF34D0361D8B83093931865EE297060932860A6577AED19D3197
3503DC97BD1EF6865324208B4BF009B44FFCFCA8BF10F99B614175891C82A471
D911E2EC041646219BFA411504B5DEAB4420977AFFDFC02BDE9D8F5197D502A9
0584174785A57BE222E9EA35F199C3C3A37264D6AC158960353812866BDB189F
42CAD4EC1FE1C92F8C7B3CB63ADB41D6933B37E7FF859E84CDDBBD608120D9AB
00BA46F93711ABDE9D819530751D05CB7DAFC64C59CCC7C1663804B24C9F1445
D6C9D5EC801721D6AC468F8180A3C27529EC104CB6C4E48E641A6DACE92C7027
F14A0BF3081682A6FC4A2EBCCA7754D6A2369D3255F6530B9107C0C3C662B368
AC681F44C9F1BDC9758C48FAD3402FA2B710A01BFB62570537669FE36CA99A64
CAFCD708E19FF48965E7EFE8D1A28B27C9BC7D335091804D5D811E91F2D2E01B
97C19695A77009E86548D0A302225F04751830BCDEA6D224DFC5FF507727E028
0A5CE240A1171441470FB0D2EEE3359E544736C45A077A187BAEE6C94F65CE8D
7F8AEF58EC30ACEA707CA3CD6A92B6106127DCEBBC5E00B634615C76E217CC46
FE08016C3D5556A2B47D54C863B664AFD75C0A995D742FA4B0D79AD36057F9BE
9E9EC599A45A1FDAE5858432715E1A76F94E19F0AFBD7AAD8CEB325A20A472CF
0F4758680CFBD0E2740D72594816736259AC7AE5156ED401FC627F67EF53342C
E08F49A90515828891F7C011DDA43796A833235FA7CF327CD80AA91F5EE2AE0E
153565351586E42BA42AD1C76CDB6FEBE9AA1B2D5AF8EEC7D31D9E2956BA4612
7B686C4CA6EFD311F19318262F208BC0D7566BF1B43D4B2126C2310E74B66A11
EE445204F211EC997858D8C68CFB77F69A8D1A56731263FC8A7C2ACB8A63E93C
840365E5B1248E2DCF847D6B03AA3FFDA2BFD92F0935E4C3FA6AAB9E2876FFEA
1BCB8207D8EEA748FE0E3515D08A93C34064BD60769F5EF91DA12D1DCAB3998C
39297C5F905227DA1EB2C536526614929A4022A62F958C906953C25F08BB35FA
7940E22FFBE1E07D28DC1A91CB004DE7EEDB4E07FDDA5A61B4BADDB54030ED85
BBE8CCC0C2174D00DBA93D79C2E4C99D093FE730F57CF8B870727ACF90A6646D
B9B20A9AEA0411CC1BE03E0CCE524FB8A008925F948C6898C74C363777449EA4
50F535BED085176E123C1139887B0494C84E42C77E3141C5E270F4A4EB9C753B
992D2B8A5BCF66CF2D1A674B6D0C1651939A7897723966E81E347EC6E460C95E
31A6BEDA01189608264DAC66D8909AF9470032C669E5CE1E1FC5834936C328BF
8A443277B889EF7E07CB878970238D8DBD0831696DFE229C7417418DF168D56C
D3BECA6BBD559DA9C00388BAB5E936A9EA0A1D15E1628632EFFD61B278F54173
F5E11DD29E9A4D7AF6FEA9B3F0396FA64A2FB09BA2A8E08B8CD3B2F82FAC0EB2
450789F1F3FF00A9B4835467412B67FB4C721F3288FFB3F4DA5FDD3465EE3DEF
C09424D7832B6787FE23BEC4E3F2686D94A403D6A5C7917847BF62ECB5E25A0A
4697CA33C61F3C4AC0A5A3F11A4CBF4B752E1B323E8213783167A9DA37A64F27
D9DCA241A164D0C9ADAB35A69E4631569C5F0B265B64B1A23A802278426C23B1
187CE611909586638642CAE44EB2D78229EBDC6AEE51985E869E1187E75A4C84
D23D4777EF668EEF6572E0C95754F4A2395C9BD9941C39BF5A8D99C64690A95F
D901E609C63A884DEBC70ECA78C2AAD0D084A226A715B06A1C124F011F78859D
3763BF4B597509AC0084527F09F524DBC4FB1C63D998E671CAF523372AE8D506
434AE6555BED94AA005DA54DA94286446AA145A487ED95860B9805A6A740E450
3B8F5D01C1B3ED72F36AACFFD590BDECBC7B404FDBB7A447DA4C996684B4B1AD
D8288433C897DA19E07B0782FA4FC5A54C5B88E5C485316E2D8345250616376D
9FC31AB01216CDE83B06D1E259B04859F7AEA9596D78776ACB9FC9EF3466CCB9
D72E83166FFAD3956BB40929F285FD169A7FE76AF82E25A84309F24F4C5A5F8A
3ADECE739A25ECADE31FDEE1E8A416157C0A54300076BEA38BDAABFB7C336FD8
B787BB379DB7B4C111BD7B2A4307A05338C6B059AFBD1B4C336673B1383BDE69
22A03D44C6ECB62C951371EF9859094CE599E7B389A56E22D9DB2C0BDD24B926
6D867F4692B008B086B52E50D335260EBDD880AF517BA23D89E5B230DFCC9F18
D371DF6734339116ADE7FAF51CF31A805FAB0053771E1785B3EB7D7AC181EDC8
F943D388C1221771CD61BBAE0B6A6CBC1361473C950C7AA20A518771E4C9B82C
74048AF39296EA5280E994EF7B3DC94917F8DEBB0A144B7FA7A9CAAF58E97226
0A848056705A93DD7F62FA8974FBBC34705AD2D2DA7B428DA0AB119E9874A430
E094A900A38C39B6E611FDE2E49D0B15BD1B9068F60EAF22ACDB98816B757532
017C44BED94C32DB33600992A0758245F6E1EAC66593E031A0D4AD94F5E5D639
BA7C96926AA776076AD84321E8260C40D710A9E78774C76426CBA84087B98E76
A1A69A835DBAB92727734DDE0683E4E21B2E7B10E30FE15E73E599AD790F6835
5C2007E89333C3140409781FDE63F22C6894E004225C8BD1480FB932779B301E
B319BF448D1F17BB5869C03D58C52F5A3992E8AF251803A9EB22E37E86C0712F
A17DBF3C8BE86642B4FF2FD078F04F432A35CD0EAF21EBF7D76146B803EB0E3E
513A267E7EAB69D665A79B71B6A41A694752D20EB1EC7967FAE8F82B3E2F52B2
3B5C4FE88CAFEDE100629F4ADFAB652CDB15B6A3A4BC080368AE0DE8EA2E1AD3
B152E17A0FE2DAAD5C41E8AA7D792403C93F55873E7CCE6580797F075558BCE9
97463674983A20445B7C9FA61773108701545ECA6EF2169C158DA003AF433B1C
99C254C66EEB206E286D94C753398B5968E5E82DE93169C3671B1B92E22B09FE
6D493EA1108930ACCA68D011AFC41B28BCD3F6C1BFD5034EC2A9F2AA1C290EEB
884E9CBEE164DE01F8499856751CFE6CA610AA58075043C46B23D6699B6CD085
4F74797AB71E311230BA0809E4D0147137CF6257DCE0F9942A3AFC8478BC929E
C72B2D6507C6794646C6D71B2F071E0C7F3A0EB7768FEE869B03B2BBE3414EB1
22A23D640442B6B00DD5E47469E0870BF0BCFB3C965733EA65634E47FEAC09E9
A4F65D281F6320EA72B01F300778F20F67EF0A9659847F8BDC7C19D87936C1D1
51AB03F8AA2BBE6EC575D483100DBDBF44F4EB3616454882A97DE8CB2A5CDF21
F917C97FC9AA656EF97124100F35EA8D8A74EFC8756282162EA1193A8F20FE71
E37D0FEDAA1FCD7962FE671B0EDC43CE701C0D2570DC08BD32631E6E0096F2F0
F76B562C970B171AD9E67328257D6A9015ED26AFCFA3FB70C84247189717A53B
EDEBFD1B31DF8DB901E64D4837D82A7BA66FA0E52FE2970F2F1A2E17E6C1797C
16DA9BAFC4E47FAE3157EB920655B93EBBAE2B082F2BF0BE5DDE1C945610F980
231C2A4ABC8F25FFF17DDE3CDBCD9ED005AE854E50AD0E4D5299881B3C51D968
BFAB4D15A613C84001D0D5E0E6E79F86DFBA8169DBE7A9A9B3FD7D283AD82EAA
AC3B37E22498B6E8FB801D746C4C8EBC0A4E6A56465462153E7B00BB0E241427
356EECFF1139EE7C18187AD9B198041C09C28EF752FF0425CCAF2FDF8509F902
AA1F23FC2B96ED5FF9BD32417389D5DFB64201D14CFA04906B999CAD77321493
186FDB02FFF9B1421046421BB25FA3D45408868DEF9320476DEA22B59BE21FFD
E5A4E606C89698342058A6EB5A8C229616709E76160DFEF062B37FDEEF5FD417
C117B1FE35FF64FB92ABFC48D2E935E1B22D50A65CC43103CA6BF510C0973DBB
957B5534034DB4CFB0437BAE1E26A27026974A70D80B0377032FBF5BA179A3E5
6E447EE2C7F6AF5076B2A4F1B05226AFB22A4DCEABAB15D1C3AA9A5FD7FDC76D
7C34F9721479DF8BD48306C587AA98091966F459B4504291CC18C925A3C7C797
2C87C1F0D03144135F7CB77809122CFD5AF2678E92CBFE49194990FAD853DA67
01398D6E2AF5DE8442FF13EBBD9A71610EAA4B3A04050A0D16A09BF3529E9799
2EFA5F8E5B1F1338ACD941540FCD151FD3BE5AD88A436E82591B0DBDA4586B2D
B231DACE4ADF0E189836B0141909CD3F998D7883CE4755E108FF6AB23747A466
F008383C95FD52F9074037E23C084BC99C2CA94452B9C034BBB4B44D7E8F9DC3
E81746B80627C32BCD02D40E9C1426E54D1D9DF643ABADE315D9EC96FA6601A6
E45B392B013A73C012B28DE715600950669F73388E8AAC522AB5851F8574AD8E
D25CB51B5C6575E62B713BC20ACB356DE78137A4FD7A46A8117C0B9DD6DF8218
E94936DB9C559E17B509026C05CAA7C7EA0B77A10579B1F0E57D092A699F1B16
C84C32CA1CB7F966A89D15D1AE3D57CD5CBA59B6DACBAB0E9A6AC070285F14ED
68B521B9170F3ADE3A773F29B4A8942D067E0B9F2219FFE640A5929BDE629191
157A3FFBCC0CAE7D83F121C74023CB23557981AF787913C8E4571FBF68C3BD70
D29382F53FC51CEC0D3A1DB11569FABA5E39F4A13F7F8503B19CD97A1AB49310
1FF3EB04B36604D4891BB23193AA2ED267FFE27302587C9F7D4D895FB8EB0647
01C71590CE54C704CD1F09A48ED9E6B65438CCD4485EF0C2E7CFB5D64EBC1E2E
8FE34ABCF54AFF89B9842C9EEABD57CEE3E156290575A496F89D56B227038D95
DD25B666623DAC97B1D90D62A3C7D65FC947A735731949F7B6BDFB9F57D90200
4AB23D97DB73F2D6F740E04AE11CDDCD46974F7063E4F239688C6FF228B33D42
FF0EDFAB48104CADDCD25E40DE9C99AA1554CDD02FB8DA5ABBDF43B959C34207
0B6714C81A467D9DE8CB96C88E752C8DA054E98F58E437705D5365C67F365AC7
A4C7C8EA2F21A6AEF1954C8D478772E1AE70C50BFCF43CE0CB9246848B798C13
E39129F5231D42D8B9B0F29B5A3B5AF05123836EC1E6C6901D8E3E531DB7E2D4
BE2261B2A9F889A232711812DEDA31F9A0D45AB5ECDF46E32FA3D777BE16A964
3AEDC59FE85B9B247E9E7F65E258634CD332BA532A47AC8A8FE246AD35193D4E
AEAC5346D94ED3796872435EE9F495B2FF35E3182C6B118E55452C3CF3ADC3A1
BF06536722D181E32FFA782B55EF7031682B1D761E731B15BF342B89065FF7CB
C7618D608A00081D606CC3CABA9BA5AE962FA240417EAC989950951E0B9DC593
786C60865224463B6E3F6291B8C9493D7238C94007A1DA39E97B80B9B79393F0
E40C911C688EFB053A67F4B71015C924C1C6C83A858307703AD2A615E3CC6385
CE694C48C41F0EEB55999DA9450F43C6A854ECD1116D7A2F9AFB9C0606A839D4
00384C1CB23AAA551EAEEC55719A28477E1B115E3D264705B653B462346D883D
6829F1E0CA14FBF1BE2875585112F1D42DF9E62F41219805044F6A1B6368FD18
A1F3AEFE6FE70EA3D86409822E6848C3CB663A32640A729C1B216647FA256680
36604AA6EA4B9A39BD0C87BC63123B9059679E2642D24DC7FD54BF9B71448DC7
D0FF798F2ABFC4F3530FB584F8D66394D5A52412F3B6FDE4D2B8C1567744CBA2
0F6153EE36667D89442AB4770812AA34D726D496F1F9E55295879472FE09EC20
3A081DF3FE430BAE958DD10A93568F2AFC2730D11B0AB7BD5E66DB46C4434DF6
57E170E61E6B7F4BD10FDBAD634391FF4FDD074811849F5172E8D8F549E8B99B
F0DA7885DF035F6A02B7180F7BEFA503F06AB2F567BB5B85182E008A7106F0B2
44D91FEE6E33C3C5EE931E07C59F0DA3FE8013047B3439B3CB7E4C779209AE26
2C0866AC42BD61CC9382BDE63777578A501016C2BEC4B765DE05A3AE7155DDD3
C0684A572B514C29BFFBDCF34CFC251E5B8C87F1C3CCA47E9157283BA2F92617
2B8E50CF99BDE93FB73370F2778D1A4D12E2D837B95F239527319F9B8B388009
045ED00278F48DD62EB83D5B486BDFB65E1742EC8C984884E158BA01D1E46090
9761A77F23249BF0E94C6D5CC78758977A7D034C96F341BB486D2338F070C4BF
69B3265505C0C1EE2E5B63730636ABCAEF19467C3CF311F26D83D79228D06B22
CBDE648ACFD583EE599C1C6B17EB650509FA1F644FE5B7CAD6BF52329BE1C6E8
33A104A780DB94410EF6A9BE66C374E012FC8A1F6CB2E87B13DEBECD19DC643F
CD746350DE65784A6BF360FB9288C5ABA005D2CA0D80469AFEDCD976D4E55015
F2A1D280D1AC2F03AB2371B9FD460DC3AD3BC9E4068A263CE0F405E5FF7D0B11
E59A874C0E145EDBE23DD210F5241896E837B3BA4D3E0E3790F3F9114A3C10BC
BA62B4B9113DE435891324FE009C53729747F2C918EED892257B03E3F5D09430
53DE9744102AF795C28B7E6754E89D6F0C611EFBFE262AC4E42AD26028D4E59E
E40A11430F87E9605E3C463A3F030AA1271F2E0249EB9939597628B8ED608184
C7D23CA5A96BBD085084FF394717EFD4840341871A23CE4F1C0775D2F213C74B
84E7ED2E61F589CE4038B60E01864FC6FE988747027D7F15C3D70187030BAE4D
104BD6765C9C071C95787E1E82A44A8F077D0A1DABF3C39A81E250AC019272BF
D1F64DF4D14902BADD62B02A0B97ED5F95EC2082858B579019365CA51D1C0309
14B4F8BB425ACAA71532A5E0F57775480DF3AF2628625BA91EBD84A394F47883
787A2BA30CBDC4C7595CADF2F67126D8104865C9DF24FE6DAEA75008DC207154
0BDEE073B4B76469BD28E5D3B2545FC2DF4BC6AC84EEA3ABAB3CE9908FF8ED30
BB2C56844F73EA3BE9FB07B8F64273E50ED262A4658BD025387D4029DB4B3327
15417ECB5CACC76DFD9BDAD9DB12461CE688434C3E0435500BB11B376B1573B9
F0272472F1436C54085E0C1FBC8D192FF0F49C8E279133F6C956A8DBCA566F15
DA40DA600EE10D9DF756F6333B842242D2F1CEC1E150F5534791C189E4EDFFDC
1F0298099A36F6658326EF38BD2ABDF6FB52ED1D06CAE30E06DEEA590D847ABF
DCAF65402B0B82555E854291EF25522A389CA7F7677D9647E6620D88137F1874
EFD31854B03BFBB05D94BCFA37C4CBB40CE9B7FFF4E19355F07660133B3CC844
778EC4B84EFC0254171EE2469CF4F0192F4EE68319ADC4FB9C3A7875BBB9D44F
2E1A182B4D8B16A96FB5C600B11E0D3696B647178D5D6D4E7433704C24079BF3
EA4C1F8C6D494610A45F0C00094C0E1F05A779B4A21449B2F252158C3F436897
899A808C95D3316E9F87692DEB9CD46BEF779AA810867AA2095C91ECFC7E098B
8DFF4880EAD9731249A0306F3D3279BBD86F2468F6834301BE47111BBE57F7EF
799C4C418833EF3D8865A5F3408F354D5A91B93B3AE1192B35F1EDA6C495A205
D34F107D1F884B4202DB39D506ACB6966A8E4F896A9545E9455378846C008BF6
DD13C7CDB7CE630194962E4147B468FB1CCA73B8E15604B25F688A073E708814
25471E70DED8FDCF9FE088543BF0AC45CEE18249F15A3FB0625327FF432E608A
604C0AC66F3E6838AA1EE0B07F40520A5AEE0A5F042816C01B8C3432FD30D4BC
B7584CF70866703B14D60329D3468FBC253521D31CC0BCCB69E716FE4F477101
7370CFB0D182CF091F3C9FFD65CC396C81E9D986F0A11A860B66E4E0F5F0348D
8E4CD92AFE81ED9153C0F36AE7DD39FE52747FFED1AD41AFC540151702C85CA4
BE7F07E8E28B35502021BF553281F95BC27700F20F851C99F423709766092196
85284FE61D259F234D319B0E20286959167EE652670077863B13869C90EA7293
C5A324DF628BA8220E6F934F53024260F73DC88C738E3833B90068048DDB3F74
739E6A4FCFE1C3735C517F4814D0D05CB379D6B7D8EB2DCCD7C4B742DC8CD0D4
14349648D3BC6E2A4170F742661EAD6BFEFDDDB7E25EEDBCBA707CF81BB2C8FF
E804C8B3B45CEB7FD334BA4D302CEF79767EC6845858B78D63B19EBA46739BBF
A5762EA73E8E9A83CFF3F34579FFF69E195A2809A8A262464990A6B381AA6528
7E47552DB177D7B1EB98B04FBF8F34EC5CB88DE676F12DB96E3E7DC2351B8F4B
553018715742F7D1119E9B7302984E6C7E4A13CB8AC8EDDE9B5C71CDEA955770
22B57F22332008EDD706424C208CA79A4F720B9ADD30F1DAB1C969A4585982FE
D85907DFF2849E4C9E6700C2D058CE8E3FAF9400B02C9BE5070B25B64C6BD18F
B18C6BFFD74A05153A8C6C696806AD17A5F5517248F071DB6863DC0B40DE2867
23D781375EB5AA3E3B9A5446BFC7CCA4A7F4D26B1269266B8ED97223DD0DB55A
449C417A6BBB4823F02E8BD92BCB78427BACA688E2B82E3709EC91BEF7EED595
8A6A7EE6EBD33BA14E5BE204F6AEEDACA9B75DCB80FF8C9FCC92FD8B51FE21A2
CA5E8F3C684AADB830524DD129C759EA3DCB253C3D61C1556E8B25DC85BF9408
FC703BFD5D84DF0326825CB3EF2A620A1B9F436E175322761D32C16B4A4D67FA
A31596F43B131BC726F6697B9F28149F175AC626066DDE876CB1755FF74608BA
9267D6FFAB265A2BA63708
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB03DBB65661FD48D
5E16DA2E1FDA727A13AA52DC9F2827BAC1ABE9135E5FF8F322DCFDC3AD492EC2
E938F27CA41A26E44E7E264E1D3304B68A5E5B13FA0E2C36D1BC7D0CC690D105
D3EE27FC27E2337EBF82BC30EB08B9D150900EC9C57B38834DF8ADB373CBCFDA
AAE5494EAF576231F91345BEBA6ACB55D71A535C90C33A846F2663B5445A2A3A
9166B80818F6C1C6315FDD85228D0313BE7D3D4B6919AAB1D5E606F44C60B792
84F67C4AABE257DF33B4EDBE4DD888AB006B1907E24A39D02878AD7EB271FA1E
C039EE7178EF77F80D59A40F6A2A7F7ADC3BB1F9D9B22BE5A2E22002F0206D6E
47AB178CE72CCEAA9F816A55544AE841FD08C8B001B4365100BB79253FCD09AF
E15B7C4C75C0C00F4549D250A8D8D0B82FBFDED75739A29DDAD519705EC0C3A4
25F84078E97512C13EEFEC631D2B1F265ABC4F71643449475261A75A8C17EE6E
339E5C3279B78C4BF98B23BA5E8FCD80D6A406BA3A705E8B1275BA8E9E8205C6
155EAF3633CB439446AF333242F316A00A621DBCBB84ED80EB0F10ECF433D4C9
901B0A5D2888B29FC66B4FC576AEFE70105DFA58305BFB1B83CFFC76259E2586
0A372E417C1865E2E3FBAD3BBC137FD522CEEC5B7CA9ECFB1E78EBBC6C56A8E4
48153895A30B4A82AF5946F8BC31643A74F5D36BD724808357D4FD1813801BFD
FD760B0F05CB4E8623072F9884ED79A75221D2A3772869EF6FFEDFCD9C2CEA3A
186DFAC1138901391308AD353506F5C42C194788D20A71C7AB8A5E0EF0CFB346
88AF3FC198A131023228625D17C0CA52B7166BBE83025BDAB11CB8C655A72354
626722C510D6E242E10BB3DCCCBA4AF763EECCA28D265C52E4DBFDF63AFA584D
F18834D58150BACD7240165512CEAFC24AE22C90AA37B15A8EF88C8A47584BEA
283A1CF2A0FA70F72D086D8C9C333260188B8EE43B41E58B2A7BBEF0A8807786
82F9303B72E0EE5DE0BF4C06CB861E9F83EBE6018D0ABC62B5AAE1C61E6A0BFE
1FED07D050499A3D2A5901E72CAF2824B381B623616474E1496420EE855732DD
7DC86ADDA15694CC20D188D41BDFCDD76EC577D98DC70BB68BBE714952E697F6
1ABD05C3251C4B2BAF7E34C30D1EDC0E1D23B407D5414671C14DA7AE08B41981
D03854746A1030E75C03F5AABC9F40395FD0FAD10424F5A866BB4658349207F1
321F5898441F8B5875A804B73DBD6549337794D5A3B77A6480E97698E528720E
5C8231DD6D7ED8FA5D2C953BD8BDC13C861DBCD2AE271493A54F1EFAACCC687D
B7121310F54E4F4718B5DD3F742689B36830AA72D8C783F4104FEE7C7A75ECD3
E4BB1C50447C558FD565E8C78B039411D782D5FD2AE1B8ED3F847E1F03905ED4
68E6CDB1A6F70903410B4C7EE09941F9ED40BDCDAFC20C8BE7449CD056B449B2
C401E18976966C2385110F713D25AB9DF242C860277428D02FF6388531138588
C4ACFEF2261374409095663B48AE58450EE4AC005E68C321C197F887107DE1F9
A8C0017A6B86E32961A136B3092A3A147FE975085184C92ABB2A20E6FDD7D29C
99DD8B05123C2C480AAF8F2E872DE75C15CC50E89D2E864A7BC4A01A40DD1FDB
8CB02A675299A0D005B3E908CF1F30298231D4F62315F477E084440FFF81806C
C1E7A182E1B3DFD1798E2DCFC83A56853E002ABC509706C00E045DC552B2E5EA
058F96140BED98C953283F17A3CBD6BA59A1AC2BACF150194EC5B23BAAA38700
327E55EAB8A3E9F8697B41DF928AFE92AA7EB62E988B0D3CE71048399787217B
CEA210E6C52BCD44A4F9A2E41B30E5C948FAB0C8D1C62FD3CEC3F7DB1333A4EB
3C05B28980AA04D5FE473791672E47DA7CB4ABD9B410BEF6473FB4126192FE55
CB7D47FFAD34A12895B6587CEADCC469FF3B2A422A2F0088B9E7E3262FB036E1
F51B26BFCAC3915932AC509DC7FF8AF9BD34B9C076DE4CF28D4940F93FA5B832
A07816AFAD23482C4B5B829303BE97BA56FF7B5FE7A9E7FB346A9DF4B7B0F000
4359C8ADA7FC13B789D6822681E3C5336B647097081FD4CD18C493638B7F1DE1
9E07753735FD4171C1CBCF567DE6C08E672E6543FD33F885D105BA461529E09F
328FE85BF0768B5DBBBB93069A44F18B05CB65151FE0E9933EB00262605ABE86
EC24E807BA6266750A00C1E578E89A9A85DB73006EE007AF3D2E7E83F293DD4C
2117048CD982CCCD4B937C78BAB41504242E9A5E28527E36E301C4F2F5A518F7
EED7B195236CB74BCF236F2124EB6D5FBAD96B899AB6166F52555846D993E489
25F5EDF78271ED4545B07BA50EAB988A1C23C7B8940F5D2568FCC3524F6F89EB
624C5800835F4FEF95F93FBB61F865EFA251BBF7C9167E0A8EEB2A4D518DF5FE
373DA1264FA065C0B2C930E7FE4B7CB450A9C45FCC1397C6B0A86284D5B10039
46F4BAD3A827D42FFA01150302010956C520A7F73F2937C26AC08DA98886993E
EC7A8FFEEC357A8C464B9D7B8B274B84BB526F68F932A96A11C32D2AE1A80B44
C4920CC2B761F94727DF477D8DB770172691545416331DA3205E8F3838329975
5769C94370B4E3C61539C239C496145E7DD84FDA4F11EEEA103137618577532B
64A356B32A047802C9BDEE75029E991753E5B22E67F46388416F4E74B4C94398
140C11B0D3D8C04D6DC208D3347920F1AA1B90E7771655549E925A3DB217E37C
BD332EB57640CA4878CF17E822E395763DE591081DE21AF12C1240C57540E733
62D1F9A09047604C2E3A3743F168DFE505F1E8AA58ECF0D7A456C54CDFC6E9A7
B5EDA26186578223C50EB478AC4131EBECAF25260F2E92C7807C74EFED2B132A
2915E045499F560A2465A0565E91E89D1335338DDC277E410107568B488FC2B8
719A92261A8F3A9713E3935410065047E00B2BCCBC9A3C3E966D3F4D95C0F321
37937473127B8664869EE3181CE8AA186193D8D53C8F1577E599E5C7BDD4EE4D
27519D78FD855C80BAA4F17B34B6037E1003933BF5A9209229BF4E006F303EAD
F194164241CAF40474E9C3264E8BFE326A2FCC6D91517EA4B3FB08646B2A3AE0
E8ED8D7CF8C91BA9F11DEF3E3CCC92DE3A26FFBBE140E9E926D619E9645FE510
0A9713CA05897C5C2B4CFFCDB530ADED4D480EA5970A5B98DD306DE58BDF53CD
00FA17DFE18BC3E03ABE1F5C3123F42899E591AF362105869DC4111B8719A79F
412BBC77594721485F26F6B9016D2BED40B57FA00116A4B3E039751B6165855C
56ADB14D8D2C0CCA456B3494F52102BEE638A990248468C25F26E307D9959874
CD62A123B9AD5A7ACB5C30A9E79E85CB8BF53846F45871E08827229420CF2450
270BB75F181704FC3ADA152A9B39D61DAF3A6D22EBE767BCD2293371F4079DF5
0A479B88B7E6235255F3B9781519418354B3C9D4EEDFE9B32CA1F5F4AF835B30
5DFD8099AE6295CE6452FC98463B6D1E17310B1467D92B1564CBE298FAA7D615
034F56FF6071ADA96AC2280B1C9B1CB4E9913BC51369DC014ED8DC99FE33F7A0
5469EE84164E7DA8ED1557A87271966D5E1909ACBFEB342BF961147137F29D04
5E4677C3751BE6F455B48BB452D8EAB1CE63B7362012104AB27BEC0234C59554
B5FBA3A1C5FA644F2EE5313D9C570EC260031A34114E3142A51A581C8452417B
746156A332F6ED55AFB396E0C5AFB06E6C5B432D1882082421D6EE28D15083E4
1EDC53EE7F396692FE58541717CA3493A7590E27B34C2E2E1BE2ED884CAFD81D
C8BB5BFC6C2916C53610E6709B59AC41BD4E256DD70361589575E9569E23A6B6
F4EEE72FD99B218E2D3A38D05AF519812BE51E78A0DAE53EC2668C37105B253D
B706B4EB253BA22595990E49CE8204AE6CB0A54AB0A067AB075D3103E27A01F8
13942A4D69BAB63EB62C78A70E6088103B5FE8193780FA1849594BF4F76EA587
ADE157FA87C5639CEF8EAF853D34719C8A797340DC0704CD42BEFC71604ADE64
B46F7AD908E50E6E2E520070772C3C91515C1FFCAF903B32D3F492E69D24FC9E
97CF95A082CB84F847014BB6267A3C8B6503A7593334F5596600D94AC592934A
CBD180C4265C0740C84E469465907BB3E7B2CD0CD9735C70936D03766AD21B45
DF3724A2EA47D80B3B5B3792FB28C56D87A88ABA66F5ABC1024D944986623010
F609D15D8C9A10A1C1A58959A2BCDB95A8360110C05BB32141219A2F9F7BBDC5
7D58E6608EFF7558DB478E5EF8B4DC28D0F4F9AB42E639262E33A89CF21C68E9
73A4D9FE0DBEEC464A41C6C6DC15E7DBED8E55CF8FACEB2A41AEDF05CA40B85C
E365D038C5388226AF3FBCB08CCB340420EAD844C7E336A2E47224D29972E847
810B3E3D6A0FC90695413FDE08830F6805DE90BD81CDDF09EB7D0728FB73B1C2
DF5118B4D2C74619505809407145D77C5B22D951F6847BFADB12DD91B4861F12
05C5C81D34392316E0CD941433DEFF5A7DCE9B977F0813EE4AD64C845127DA6B
94F96079F686FE10B1AB2228AACE768DD26445190ECF685E7BF838CAE730AFBB
E3687D90542981516630C2CCD40CF07EA3AA49DCC2D5CC2D796BA6CA1B93FA27
83C18A7081BB584C1711988131B62D3D1BF8537CFC17525B21FECE382066BBB4
21B64622C358282508BB2CBB0DA163D9689FEE91A1E12D0EA98AEBDE6DF15192
B2D993312ACA959BACCA61BE6D41EC35130ED693ECA662DE75C772FB11C2BAA3
4CAF35DBD1AEA31444FBA6C3004F242891114945882FEFA70953AB89F04D39A0
C8713D38121FE0F961528C80E4B4F1855AE19814372F436FC7DA3667E3C41615
A138B1F2C9D67EE0E7AF9187E298CB7AAB55AEF29B81944114C51B0D858A89E0
527447600C13EB4B15F2817F78CF92248B4EC32C312C7FE7A7ADA9FD2CFBE63C
527495C8313D38B910FC25BEC077EF784B2FFEBB7DD2A9EBFB6C07862D3090AC
8A8113B05F1AAAF6EB20FE7AB6AF39E886CD74B7359D9837076DB06E36715D41
8AB923B91541A12756F5530FEA36EFC75DE681BCA83F11AC7B50C0426C6C6CC6
CDF63137CA425B9410C3E2EAD29A5C5AC9EF9131F8250D7558056E9E7741EDB0
8DB15E6F17ED188EA8C2D5EB174B3392EAD9830AB4A46DC833DCB9E2B9664195
D04BA559277840481E25B028D5A89C3728E57F8497693191C5A76A24634B663F
73D3890242B561D1EA51A1F98329DCDC3EB96CD64962BB527351F6765582F919
A4ACA70C95A5E409CB9597E53310C680BCC0C2E980170CEA28F54B643A9BBE06
4D3B9237193F2BA023C45C0D1526EA8CCD820975F84C242B533C5F26688210F7
59E86616FE3023CDF8F2E3205A114D00FC4CF71B756FE8B864CE6662153FF2FE
B28700903A8FEC0119ED1DBEAB0839F444CFE8AC2F2FF46DB2B95247BD8261F3
981A45B755CB8685EEA1537E8E96AC320C772B9366592E2309385FB06A7E3896
373C3FE0F42DD7640FCD223CA4E5DE096705B403C2AFAEF4EB42296C279FE228
8999725DDF5A32116FC143C27812E1472F10DDF614AAEE0D8590A352757967BD
D076E1D7C37798C2B2A3C835F7A730F5570B6BB7D1417DDD2BBFB57DA23A874C
53F086FE8BB1881035381B64EB961CEF018978D15D8EDA66AA436B9280424F02
DA39182640999D6B5ECEE722891D03550B1833B79F3EB9D9205DEF5EB47E022C
A072C469EF02B86E42D82C460F5522F8FD1163302A3D65AEAEE8D15D912F9F16
56852755CFE534E87191DA2EE6E1BEB50862F718C3FE7669EF79FFC894400464
219588791DA36D69F99C6604371D104080D89BDC077B62797B19FF1C4C6BF0DD
7A480BD29C45994D80B5DBA051CFCEF85B326C9D9E55A2770655DDC69B5C4D96
5AD7A4A9448349DB25D939C03B73F2C64250E5EC798A612BE00216373EFB1F66
818F676D0D959F18B7D3CE15A4F36A0BF0D97E773B1E19920DF95B43302D3E39
11E907177CA545CF33354A402D1886913B85A780A61DF25521203F8006D07725
D1051C7E8344454E286BAA5DFAB9C4E3ED9DB27C82E8D911F4DBF3D5F679A596
F854F52A1B3D0DAE92D47A16BBA8C0F65712B39281505A819DF0CC03B973402A
D1124FF9E626CF0EBE3535AD203F8D8D78A8E4420BAD21E126990BB2F1FB85E5
6461FA347975A4F372CA460F99E254F7B6EBEE687699E1E4C25AAF54519520CC
06361F075BCCC0E4C90A598B0F9E10A9CC8CC918FB884F0DEFCE7828D7D72EA4
16F01183C3C979A18A46553A8A85B8F34AFE4DA1EC3AC2D43E99D94A488E5A9B
135A2ADBF33C3567BC6F6C6FFFB6CB82F320A4F883E87FA1C4B58CD3328F0DC9
64B24664E17FA4598AA85D1A40DF53F01A8B6669056214D728810EF217D58CE2
688E76ED5AA7BAE85EF56BB3930294D27652FB2888E51BCFFA01AEE1862EF85E
C2F845417CAA2A13EB49AF90E4BBA192B5F546B7F2C6AED4BA821D1BD5171D26
C71A620B19BE13AB37A5316BD9F9EF8927377419442EA226885279BD94DB88B4
80A2D54428446AE63983643439521B1D225723A96091CB41D6D462C1C68CA7FD
651AF167894B9743045EAF35E3159D37C248BD67BEBCE6E1284CD362B55E72BF
6917384989D4719C81BC5432D45BD5453B13AB738A65626474BA64D720CB772B
840B1F52CBDB39B6E9E037705608D0A9E59040841BF400F4C41EF7E112449F7C
C51985B33ED975A44748B104D2FD8D5766991C2434305F4E01DC7DF5B3310C9C
30259675122E91E617AEC2C9554E420A3A36D171184932933581486C9DD860E0
3F14A6315DA98BE373889076F10897B1E1451752D6B0F7E5E5521E23B9887050
D043B09368E43CEB4EB4ACAB454C6CB74F0B3B71C4ED61B502E510A24171D3E5
08B67D68BAF10B97DFFFF0C521D34F98B69FF4C335B95F4222A8BAB77662B4B5
1595B16AF9E044066353662414DBD469C92C458CDBFAB563D1D6460461745169
91A196A915CE6918CEBA1377D03B6C92B608C178B9CF687F6870B3A796EDAB76
1DE1C13E06F1086EA20848A8E5E5D3DFB2424B7CC458238FD7A3A1B81718F3A9
94AA4CEAEAD1F1FB02B3052E0070D5D02D5B14BC98B1900173514DED0F14C5CD
9EB32B0D0A45B8D17CB74BDAA4BFF6DAB5380CBF6172F37CB71FFEFFD5E8FC13
3B2DD91215E75E596E08D144D082F142D8A696A7DC3322D57784BFA903DC5A82
9DB662C7030DEA48931955CB6414033D22B683432D749F10479516B3AC9CDD2F
0925A0A651920F48701D6092ABBD856D4CAEA93AD9B24EE0A930903AFF3578A6
37E8D41E976F62828F67901B52715557491B4DED0A19A1E6464D99B4137AFD56
CC7ED9B639F7721494095A27ACC03DAC92F4D32A6586CF815A1B31F994326E2E
2EACB65B5C22FC0F9FCD090D1108CD4E786394420BDFF1DB4D8D3FAC00B61111
3231331995F6B9B024F120A3F47243D609E4F31AB7E5EF972F4B51C20211E50E
0EF6EFD917EE28E980A062580B9FA11ECF87EB4419F3E20418C7AA4D499D43A8
B60D7A0DB9382BA89F09E0DB0B0BF58CE30E46FEA88D8BB0EDE87EF9DAB50C42
5E913F25E79B7CE6E98897122200398D64538E2B3F1488D2EFD004E118232A5C
3DC535E227108899590124B22863DA96AA2AB1BA5B2CF418B4446739318E89F8
125713CCC90D54FA5E0E7CC8DCA642CFE5A4A98D4F964A4CB67F2E1799CC7AD8
81CD1277452731409EE7F0B4DF32E9CAAF95CA8FB8D7D6F8E6B1F1470D1BFD1C
6D9F62E8CF221B995527DC000AAB577963DFBC17E9D7D0BF0EB39595658AB429
EEF5356F7CCD11E4F2FDF36752CE4DB97E5BA59D46A448D60C4417D996A499D1
C5BB0E923F244D8AE9FFF3F592BB136F41F11AFA8CC986D7902CC8F2E29BB880
EFC696D77D210536D7D1148AC9EA91BF018E6F3E3F8D082AC5C1C042FABB421E
2E94D2530163B582F0293F2C1D8998FCADE704A1079142ABD7D1B8AD117442D8
02DFA2CFCA8916CF08834EC4CE1B8CA5C6088E67C39BA80F4AF54C461338B97C
BCD7D4B885AB7F5DD10679FCA5F7EFF91D63AFCA4CB7F6C1FD5174F5EC78D1B2
379918C8034B08588939C4816137832A56C48FC89066B9FF63B80A84B36F765B
ECB4A2FF37B92CE6C953A91853B38E12AADEF8F3E48A2B30847864508357A140
1A459A47862C52CDBE8F3323D6228D989FF17DBB6C552C3AD32BB1121234BC69
2A3E158A14C9BD02E00781B20C4C6894BDCBA10A6228866A46728049B116F109
6AD998FE4B93525C3596EE846D3ED58922C2D185B80B478DA643F3EBED3ABC74
FA8DE8079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54B3CD64DB734558A0B4
956554FEC18293C59D678580049C8A1DEF1B58D658AEF260EC161B2D9589EE8C
8334F0A2151D921DD21A2D91C2C88736994B723070FEDE72BE3B0ACD38B59012
21B1DC3066AEFE92E3FBB7E4176DACC868F62197B85088749F3CAFA40A6A3223
D4CED495D6296649F82AFF3FF151EDC1EF95339F55314E30DDEE80E034928D25
2C6E5DD599F32E60A1D5251D270D0D2D0816986E426A0AB8B3F2D148CEE3190E
80C659E171B0BC024791F393457B9149586345BC1C0C9BCB39ABEED7EF6AF8C4
8007BB3BD8F7FABDDB15B1E92EC9B672F8BBA560AD54C2F82C70CD016F47091A
DE75AA50835781D1407E2D2E4F161CFB6FD6754BDEE29C4FD8978FC7659ABBE8
47169B2ACC95F901CD7DA38FAA447B31A65DB3DE45991535D954F01ECD5C2CED
3A0113890BD4180C41990C4DAF5918274B0804CDDDD6A456D0CD4BB0433209DE
16CC39ACE4A00A43D254FE64BE0E05DD157E37A6EB7BB451424481DDEC357002
15F60737ECDD6C87E2764C59C2EFF89E59D96430253E8941AFEE580387BAA447
18FC3859F31C9481DF5C6F78E428F8061774E99961273EB9E4CEAFBCE60FE10B
3FC813D976E6E54C8EA8AEAA179727D33539068CB234A10836AB34663A141DA6
9B46D41A04EDB99391F7AFDAD204076F8CCF230961BE8AB89D792D6907AA246D
E7929449BDD74166B19F8D223BFF81002873FD990D7DB2172E78E256BE2993CF
37E19AAED47B127BB346422ACB283E4CEA8EA96D198A3405E399E307E67BE81E
7C8C80AD5BA6FEA6493164652D1D290FB5237CAC3D4C87CEEF4CD4E307C05A3F
0C735251B19FBA354F4973634C6044E620279617E32874D319A05DF762AC7310
5DFA58305BFB1B111DE1AAE37F4D2E45F5EA2925FFB4A1663337FB491BBF618C
94177E22B002A6848BFD472C8995C7985281079AC2BB0B12EA07523349225E6B
8E125B2BF975F9019D6C197F407079931CB80ED4E4AE959D8692F0931B645389
4D10C7AA6F048D0036F12C6291A6841A8CE789CBF34841825F55E8C228FE6B9B
5AD22A984CF330BFB30EC8C7CFB3049E661E7DDC6E20078D430C8D349828C725
FFBB2A74FE5D0F4CF3D5B0CAD0BE30620F18FA951ECCB46DCE6DA50E14C59E74
0297AD47BE0C50047B664FB1DA4DEC662E564D84610836205AE40BDC7C23315A
38DDB47182621A20CA993B173E68FA3D21DBC6904AEE4B0170E1F290D3C99C48
1BD6EFEEB6157D96A28C98911F30286B41180AD68E004804D8898C280C8E7B5D
62C7BE11A2C6590136436E2467AB099CF757AA8290260481C4DEFA6C3A6AEE1D
EBE48E29F3D6C7754E9DC69EE7FF1086D10348042C3CA7F5E6B8402599C1A16D
84503374238F22A8E6F6EEEC2ED8A260F39B0550D4C4815835E9590B969C4741
3363606C829C830FE5F63A71729A13D33D8FB684E5F9460B4EEBF04C43D52047
3C14BDBE7781D0D961AFC767E702E5B03824E95A4AF216B63C8FAE84AD4BAB0E
C340FA3C7A6506BC917B84A0F3B8B0B6E520D3445CB1D2345C4A7DD3733979E7
72A91BF57A15991E25D34E703166016C50BAB0D7518279049D1E81D08D457238
BB905A86E2C6C10C1604089972BF9EE01FEF34B4D4E428B11B9D3FD07C5E85DA
52B6FCB387E40BC9F9438C690773920FA84C2E77DE15811C9D30FDACF8851DDA
C34DA40D4688E22CA3CF178684D7A85FB8EEFBB98B0477827B880977355084A7
A03E74CA846190DD023B240B3AB6AD186E9C339676D7BB9AF94FBE4BD1A38E27
CB3C2E6B8AAD5ED7DFE899B62483DB5E344D162E0D78712F8F498F1A8181C6F1
9167BBC3135EBEF3DB546D5083C9A91C6915999AA485DC2B61AF525791F51AE4
D973039568ADED13A7694295C15AE0A2D8CBE7D0A1EA6E66E183752B95A0F8BE
331687857FDA0D80DAD3FFDDD0E37B3DCBAC4E24CF381F07C9985A8705868338
3BE7A97D9DE6D4AF398B968C9DFB208923EDC5C0FAB0B774EFC49D49CF63AF35
EF1AA4859829B85FD4D24DB03D759058A6EFB08473ED6DF98E521C0ADBFF6C9B
9F8B57F42CDA86A62A0D2D3A7BB0653D6D79DDA9735E1478C4E21314A145C040
516B73E5D27F1653794DC3E30C2AF6DFA19AC5622CBB8ADC1F9410AA73254F34
CC7FDAAF212ED3BE13BA7DD4AFD6AF6281C3619FF17ABCD16A2EEA43533FD2F9
AD5DF63E6DFDF67870337F4F3C11D9185589882CE4BC9C13BB12AF8246BA3ED6
99675D5617411FA4C2E5B279D89DC565746F123D5B2FE787AC0A9BA5B675936E
87821971035CAC833B29CD40269F338D8B04A727010631601DC5CCDBF8C497D4
FB3A6E6DCF2E0DB874FB0F13546DC8CDFF8025C27808FCD701B4FC90870ACADE
BE6FC6FAFA4CC4AD75B82B8B62A9926FB0E1DCFE0CECFCB8C2C71E1C8843D069
61A0CF381899F0EAB43BA38415DCAE4B815316ACF3A267B833E059A871FFE555
D4822A44FC1BFABD55BF6FB16A65171B3433CD7B739F64716FA450D3B82EFAFA
38FF3D4CF9F874FD9974367CF697FDB94024CB2D6F57CC53BC92FFA02FB28726
C17EC4BB17743C8534BAFCBDAD1329E550C711D7D85DAD021F86C27FF90A5302
BA82040D052202752A2DEC52DB4D11DF408FECFF97EA95A63416DA0DFD8C9867
8AEDFFD72AA7F1AC2FFAC86F1BB0825A36E88581E700BBF0913A85623D5718FA
118427202F5A3781FBC6CECC53CAF94C47622D02FBEB470DCB239EF9D2E73CAF
78D07D2D97C1E3640FF15F75D077EE72AD127E2D05F9B631FFEC760D540F9F63
37205012C4CD3709F19F2049CAD5AA0B996F3169EA75C6617E1ABDA3E56FF107
0CE06C82D56FCD1E8A49408B518B0EA678588DFF69E228841C83EE56A5E590B5
5A15B4921A10B993B48168AE6988806D0C398CED2EAFA95B1A9884B71C54D853
4589EB20098CD362273B01B44A3EBD168F17B58AB7BB3063763FA1CDD0D72D52
9483734901BFDB16167FD5F9E3BB17F128EFA3C53B0D7E638B9DC480786F42E9
ED7EA2E00CA62B265DB2540CB837E2BB354220E95CB01F20987EA913AB0C1432
0CE566F4DACB934B84D79B967578B841E03362AE479A84C899F81524209F5751
5B8711C883F72A414076DCAB0B3DB63D331D0C6A7A594403EC5566D6D4B2E7DD
911F137F788689C533626FB3B2F1EAC025BFF621D5A9DA47A12762FC743DB9A1
33293BB3DE23FA4937BCC26A5F3C6B3F3AFE8E3E217B3C838D6763946166B338
8EE42D00F64C2310562356D135D1E1444D6FD7C2EED79A0B0A4E1FE0E5B1C7EA
23213F2BAF16780D964733863B9DFC4D51115E13611C107AF67573AE7ECFD4F8
FA257534AEE49C0579A7B92465B5404708856E56F1248137DF591B6DCAA37AFB
5EA99AE2492D6ECCAF5B62905574203B98ED1DCC55C4C25D9E83480C6B7B0145
2F21D360BCFCEA91ECF2B27818CC4283A58E0106E44A86218B56D8FD35D05870
2354E9FB2242C3D9792A932178833DB6B6526C05AC576208AE12160FEE917145
3769A677E74C4FFA5C7AD02DB88CB516D33C604E733185D1D814F063B57118A2
948E3BE1233277A79FC2932D205053BB85A393F2DDA479C06BF8701AA3E494A1
C94FFA526C16D62BD8156FBB1C8C72471CF6BC41F06633E61CCB4689F12FB326
45CE97B572E1DFE84609EF7D7E659ABB637D42FF5C02A7EFDE71AABA4A21434D
2B806117401A86233D9348B4B8B40C394EEF55167160BC34F092676B3634EE4C
D67D8D231B9879EE08A0FDE3ED6CD5E61CF87DEE5D0D229940939A97B9AD552C
02FFF8724A31AEB63356AC7FAA0BE37C602B077F43108CE79C0E0FA83DAD24DD
81E46E051DF43E340B32D48093BF61AE116CB342849EB9D211C8FAC02C09656E
EAF11CBC54708B0B4101EB2C49E17D5CF22101A8097EBF073594C8E61BEAF863
E9859B8281FFD86EB10B97DDB9997DB565187BA0C70ECAF8A05CA2A6E0DB06AD
7C2391CAC0B6B9DB119E101ECEED67753311F2365620B41ECDD2C8C0D7FBD9C4
5B0355157FF311AC44495198DBECAA1D267187D5D8AB943EDDD3E480B957A57D
608C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (p1.dvi)
@start /Fa 240[34 15[{}1 58.1154 /CMSY7 rf /Fb 134[37
37 1[37 42 23 32 32 42 42 42 42 60 23 37 1[23 42 42 23
37 42 37 1[42 9[69 4[51 5[46 8[55 1[51 6[28 12[28 41[42
3[{ TeXBase1Encoding ReEncodeFont }30 83.022 /NimbusRomNo9L-ReguItal
rf /Fc 171[41 37 4[48 59 3[22 1[48 1[41 69[{
 TeXBase1Encoding ReEncodeFont }7 66.4176 /NimbusRomNo9L-Regu
rf /Fd 205[29 29 49[{ TeXBase1Encoding ReEncodeFont }2
58.1154 /NimbusRomNo9L-Regu rf /Fe 105[42 1[37 25[37
42 42 60 42 42 23 32 28 42 42 42 42 65 23 42 23 23 42
42 28 37 42 37 42 37 7[60 60 78 60 60 51 46 55 60 46
60 1[74 51 60 32 28 60 60 46 51 60 55 55 60 1[37 1[47
2[23 42 42 42 42 42 42 42 42 42 42 23 21 28 21 2[28 28
28 35[46 46 2[{ TeXBase1Encoding ReEncodeFont }74 83.022
/NimbusRomNo9L-Regu rf /Ff 138[46 28 1[37 46 1[42 46
3[28 23 1[42 1[37 46 37 46 42 16[51 65 7[65 2[60 2[60
6[28 42 1[42 1[42 1[42 42 42 42 3[21 44[{
 TeXBase1Encoding ReEncodeFont }28 83.022 /NimbusRomNo9L-Medi
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 0 1
TeXDict begin 0 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 444 Project 1: Getting Acquainted)/Subject
(CS 444 Project 1)/Creator (LaTeX with hyperref package)/Author (Jiaxu Li, Xiaoyi Yang)/Keywords
(cs444 ''operating systems 2'' Project 1) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.0) cvn /DEST pdfmark end
 -158 -481 a Black 0 TeXcolorgray Black -150 -150
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -150 -150 a 0 TeXcolorgray
-150 -150 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -150 -150 a -150 -150 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -150 -150 a -150
-150 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -150 -150 a -150 -150 a
SDict begin H.S end
 -150 -150 a -150 -150
a
SDict begin 18 H.A end
 -150 -150 a -150 -150 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -150 -150 a -150 -150 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</P(0)>>]>>>> /PUT pdfmark
end
 -150
-150 a 0 TeXcolorgray 0 TeXcolorgray -53 -50 a Ff(Pr)o(oject)29
b(1:)h(Getting)g(Acquainted)f Fe(by)f(Jiaxu)g(Li)h(and)f(Xiao)o(yi)g(Y)
-8 b(ang)28 b(from)f(Group)g(34)h(CS)i(444)d(Operating)h(System)g(2)h
(F)o(all)g(2017)-150 234 y(Abstract:)35 b(This)g(report)f(is)i(to)f
(list)h(what)f(commands)e(we)i(used)g(to)g(b)n(uild)g(k)o(ernel,)f(e)o
(xplain)f(each)i(and)f(e)n(v)o(ery)g(\003ag)h(in)g(the)g(listed)h(qemu)
-150 383 y(command-line,)25 b(and)j(pro)o(vide)f(suf)n(\002cient)h
(detail)g(for)g(the)h(concurrenc)o(y)c(v)o(ersion)i(control)g(log)h
(and)g(w)o(ork)g(log.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fd(1)p 0 TeXcolorgray 1676 -50 a
SDict begin H.S end
 1676 -50 a 1676
-50 a
SDict begin 18 H.A end
 1676 -50 a 1676 -50 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 1676 -50 a 2 w Fe(A)t Fc(S)t(S)t(I)t(G)t(N)
t(M)t(E)t(N)t(T)25 b Fe(1)-150 185 y Ff(Due:)31 b(23:59:59,)c(9)k
(October)e(2017)-150 525 y
SDict begin H.S end
 -150 525 a -150 525 a
SDict begin 18 H.A end
 -150
525 a -150 525 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 -150 525 a Fb(A)g(lo)o(g)f(of)h(commands)e(used)h(to)h
(perform)f(the)h(r)m(equested)f(actions)p 0 TeXcolorgray
-59 735 a Fa(\017)p 0 TeXcolorgray 41 w Fe(ssh)h(os2)p
0 TeXcolorgray -59 884 a Fa(\017)p 0 TeXcolorgray 41
w Fe(cd)f(/scratch/f)o(all2017)p 0 TeXcolorgray -59 1034
a Fa(\017)p 0 TeXcolorgray 41 w Fe(mkdir)f(34)p 0 TeXcolorgray
-59 1183 a Fa(\017)p 0 TeXcolorgray 41 w Fe(cd)h(34)p
0 TeXcolorgray -59 1333 a Fa(\017)p 0 TeXcolorgray 41
w Fe(git)h(clone)f(git://git.yoctoproject.or)o(g/linu)o(x-)o(yo)o(cto-)
o(3.1)o(9)p 0 TeXcolorgray -59 1482 a Fa(\017)p 0 TeXcolorgray
41 w Fe(git)h(check)o(out)e(v3.19.2)p 0 TeXcolorgray
-59 1632 a Fa(\017)p 0 TeXcolorgray 41 w Fe(source)h(/scratch/opt/en)m
(vironment-setup)o(-i58)o(6-)o(linux)p 0 TeXcolorgray
-59 1781 a Fa(\017)p 0 TeXcolorgray 41 w Fe(cp)g
(/scratch/\002les/con\002g-3.19.2-yocto-q)o(emu)22 b(.con\002g)p
0 TeXcolorgray -59 1930 a Fa(\017)p 0 TeXcolorgray 41
w Fe(Mak)o(e)28 b(menucon\002g)e(\(change)h(local)i(v)o(ersion\))p
0 TeXcolorgray -59 2080 a Fa(\017)p 0 TeXcolorgray 41
w Fe(Mak)o(e)f(-j4)h(all)p 0 TeXcolorgray -59 2229 a
Fa(\017)p 0 TeXcolorgray 41 w Fe(qemu-system-i386)15
b(-gdb)i(tcp::5534)g(-S)i(-nographic)d(-k)o(ernel)h
(bzImage-qemux86.bin)c(-dri)n(v)o(e)k(\002le=core-image-lsb-sdk-qemux)o
(86)o(.e)o(x)o(t4,)o(if=v)o(irtio)16 2379 y(-enable-kvm)26
b(-net)i(none)f(-usb)h(-localtime)g(\226no-reboot)d(\226append)i
(\224root=/de)n(v/vda)e(rw)k(console=ttyS0)e(deb)n(ug\224.)p
0 TeXcolorgray -59 2528 a Fa(\017)p 0 TeXcolorgray 41
w Fe(GDB)i(linux-yocto-3.19/vmlinu)o(x)p 0 TeXcolorgray
-59 2678 a Fa(\017)p 0 TeXcolorgray 41 w Fe(continue)p
0 TeXcolorgray -59 2827 a Fa(\017)p 0 TeXcolorgray 41
w Fe(tar)o(get)f(remote)f(:5534)p 0 TeXcolorgray -59
2976 a Fa(\017)p 0 TeXcolorgray 41 w Fe(root)p 0 TeXcolorgray
-59 3126 a Fa(\017)p 0 TeXcolorgray 41 w Fe(uname)g(-a)p
0 TeXcolorgray -59 3275 a Fa(\017)p 0 TeXcolorgray 41
w Fe(reboot)p 0 TeXcolorgray -59 3425 a Fa(\017)p 0 TeXcolorgray
41 w Fe(qemu-system-i386)c(-gdb)h(tcp::5534)g(-S)j(-nographic)c(-k)o
(ernel)i(linux-yocot3.19/arch/x)o(86)o(/boo)o(t/bzI)o(mag)o(e)c(-dri)n
(v)o(e)j(\002le=core-image-)16 3574 y(lsb-sdk-qemux86.e)o(xt4,if)o
(=virtio)36 b(-enable-kvm)j(-net)i(none)g(-usb)h(-localtime)f
(\226no-reboot)e(\226append)h(\224root=/de)n(v/vda)e(rw)k(con-)16
3724 y(sole=ttyS0)28 b(deb)n(ug\224.)p 0 TeXcolorgray
-59 3873 a Fa(\017)p 0 TeXcolorgray 41 w Fe(q)-150 4099
y
SDict begin H.S end
 -150 4099 a -150 4099 a
SDict begin 18 H.A end
 -150 4099 a -150 4099 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 -150
4099 a Fb(An)g(e)n(xplanation)f(of)h(eac)o(h)g(and)g(e)o(very)g(\003a)o
(g)g(in)g(the)h(listed)g(qemu)f(:)p 0 TeXcolorgray -59
4325 a Fa(\017)p 0 TeXcolorgray 41 w Fe(The)34 b(code:)g
(qemu-system-i386)d(-gdb)i(tcp::5534)g(-S)i(-nographic)d(-k)o(ernel)h
(bzImage-qemux86.bin)28 b(-dri)n(v)o(e)33 b(\002le=core-image-lsb-)16
4475 y(sdk-qemux86.e)o(xt4,if=v)o(irtio)16 b(-enable-kvm)j(-net)i(none)
f(-usb)h(-localtime)g(\226no-reboot)e(\226append)g(\224root=/de)n
(v/vda)f(rw)k(console=ttyS0)16 4624 y(deb)n(ug\224.)p
0 TeXcolorgray -59 4774 a Fa(\017)p 0 TeXcolorgray 41
w Fe(-gdb)27 b(tcp::5534)g(:)i(open)f(a)h(gdbserv)o(er)d(on)i(TCP)h
(port)f(5534)p 0 TeXcolorgray -59 4923 a Fa(\017)p 0
TeXcolorgray 41 w Fe(-S:)h(do)f(not)g(start)h(CPU)h(at)f(startup)p
0 TeXcolorgray -59 5072 a Fa(\017)p 0 TeXcolorgray 41
w Fe(-nongraphic:)c(disable)k(graphical)e(output)g(so)i(that)f(QEMU)h
(is)g(a)g(simple)g(command)d(line)j(application)p 0 TeXcolorgray
-59 5222 a Fa(\017)p 0 TeXcolorgray 41 w Fe(-k)o(ernel)e
(bzImage-qemux86.bin:)c(use)29 b(bzImage)e(as)i(k)o(ernel)e(image)p
0 TeXcolorgray -59 5371 a Fa(\017)p 0 TeXcolorgray 41
w Fe(-dri)n(v)o(e:)g(de\002ne)h(which)g(disk)g(image)g(to)h(use)g(with)
f(this)i(dri)n(v)o(e)p 0 TeXcolorgray -59 5521 a Fa(\017)p
0 TeXcolorgray 41 w Fe(-if=virtio:)d(specify)h(the)h(controller')-5
b(s)27 b(PCI)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
-158 -481 a
SDict begin H.S end
 -158 -481 a -158 -481 a
SDict begin H.R end
 -158 -481 a -158
-481 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -158 -481 a 0 TeXcolorgray 0 TeXcolorgray 4021
-373 a Fd(2)p 0 TeXcolorgray 0 TeXcolorgray -59 -50 a
Fa(\017)p 0 TeXcolorgray 41 w Fe(-enable-kvm:)26 b(enable)i(KVM)g(full)
h(virtualization)d(support)p 0 TeXcolorgray -59 99 a
Fa(\017)p 0 TeXcolorgray 41 w Fe(-net)i(none:)g(indicate)g(that)g(no)g
(netw)o(ork)g(de)n(vices)g(should)f(be)h(con\002gured)p
0 TeXcolorgray -59 249 a Fa(\017)p 0 TeXcolorgray 41
w Fe(-usb:)g(enable)g(USB)h(dri)n(v)o(ers)p 0 TeXcolorgray
-59 398 a Fa(\017)p 0 TeXcolorgray 41 w Fe(-localtime:)f(let)h(the)f(R)
-5 b(TC)30 b(start)f(at)g(the)f(current)g(UTC)h(or)f(local)g(time)p
0 TeXcolorgray -59 547 a Fa(\017)p 0 TeXcolorgray 41
w Fe(\226no-reboot:)d(e)o(xit)k(instead)f(of)g(rebooting)p
0 TeXcolorgray -59 697 a Fa(\017)p 0 TeXcolorgray 41
w Fe(\226append:)e(use)j(cmdline)f(as)h(k)o(ernel)f(command)e(line)-150
923 y
SDict begin H.S end
 -150 923 a -150 923 a
SDict begin 18 H.A end
 -150 923 a -150 923 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 -150
923 a Fb(Write-up)j(of)g(Concurr)m(eny)g(solution:)41
b Fe(Thhe)29 b(concurrenc)o(y)d(problem)h(w)o(as)j(Implementated)d(in)i
(C)h(language.)e(After)h(reading)e(assignment)-150 1072
y(material,)35 b(we)i(kno)n(w)d(that)i(there)g(are)g(se)n(v)o(eral)f
(synchronization)e(constraints)i(that)h(we)g(need)f(to)h(achie)n(v)o
(e.)f(W)-7 b(e)37 b(k)o(eep)e(the)h(b)n(uf)n(fer)f(in)h(an)-150
1222 y(inconsistent)24 b(state)i(while)f(threads)f(are)h(w)o(orking)e
(with)i(b)n(uf)n(fer)-5 b(.)24 b(Also,)h(the)g(consumer)e(threads)h(w)o
(ould)h(be)f(block)o(ed)g(if)h(the)g(b)n(uf)n(fer)f(is)h(empty)-150
1371 y(and)k(the)h(producer)e(threads)h(w)o(ould)g(be)h(block)o(ed)e
(if)i(the)g(b)n(uf)n(fer)f(is)i(empty)-5 b(.)28 b(W)-7
b(e)31 b(put)f(the)f(iems)i(in)f(the)g(b)n(uf)n(fer)e(in)i(a)g(struct.)
g(And)g(the)f(item)-150 1521 y(are)f(generated)f(by)h(Mersenne)g(T)-7
b(wister)i(.)-150 1730 y
SDict begin H.S end
 -150 1730 a -150 1730 a
SDict begin 18 H.A end
 -150
1730 a -150 1730 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 -150 1730 a Fb(Re\003ection:)p 0 TeXcolorgray
-59 1956 a Fa(\017)p 0 TeXcolorgray 41 w Fe(What)31 b(do)f(you)g(think)
g(the)h(main)f(point)g(of)h(this)g(assignment)f(is?)h(W)-7
b(e)32 b(thihnk)e(the)h(main)f(point)g(of)g(this)h(assignment)f(is)i
(to)f(mak)o(e)f(us)16 2106 y(think)e(in)g(parallel)g(\(multi-threaded)e
(programs\))g(and)i(impro)o(v)o(e)f(our)g(solving)h(problems)f(skill.)p
0 TeXcolorgray -59 2255 a Fa(\017)p 0 TeXcolorgray 41
w Fe(Ho)n(w)33 b(did)h(you)e(personally)g(approach)f(the)j(problem?)e
(Design)h(decisions,)g(algorithm,)e(etc.)j(W)-7 b(e)35
b(start)f(to)f(kno)n(w)g(about)f(what)i(The)16 2404 y(Producer)n
(-Consumer)28 b(Problem)i(is.)i(Then,)e(we)i(searched)e(information)f
(about)h(multithreaded)f(program)h(to)h(refresh)f(our)h(memory)-5
b(.)16 2554 y(And)28 b(follo)n(w)g(the)g(material)g(to)h(slo)o(v)o(e)f
(problems)f(piece)h(by)g(piece.)p 0 TeXcolorgray -59
2703 a Fa(\017)p 0 TeXcolorgray 41 w Fe(Ho)n(w)h(did)g(you)f(ensure)g
(your)g(solution)g(w)o(as)i(correct?)e(T)-6 b(esting)29
b(details,)g(for)g(instance.)f(W)-7 b(e)30 b(follo)n(wed)e(the)h
(material)g(and)g(w)o(ould)f(not)16 2853 y(proceed)i(an)o(y)g(further)g
(before)g(we)h(mak)o(e)g(sure)g(our)g(function)e(w)o(ork)o(ed)h
(correctly)-5 b(.)29 b(F)o(or)i(instance,)g(the)g(producer)e(can)i(add)
g(itmes)g(in)16 3002 y(the)e(b)n(uf)n(fer)-5 b(.)27 b(And)h(the)g
(items)h(did)g(e)o(xist)f(in)h(the)f(b)n(uf)n(fer)-5
b(.)p 0 TeXcolorgray -59 3152 a Fa(\017)p 0 TeXcolorgray
41 w Fe(What)29 b(did)f(you)g(learn?)g(W)-7 b(e)29 b(refreshed)e(our)h
(kno)n(wledge)e(about)i(multithreaded)e(program)g(and)i(C)i(language.)
-150 3492 y
SDict begin H.S end
 -150 3492 a -150 3492 a
SDict begin 18 H.A end
 -150 3492 a -150
3492 a
SDict begin [/View [/XYZ H.V]/Dest (section*.6) cvn /DEST pdfmark end
 -150 3492 a Fb(W)-8 b(ork)29 b(Lo)o(g)-150 3727
y Fe(2017/10/04)20 b(W)-7 b(e)25 b(started)f(to)f(read)h(assignment)e
(and)h(mak)o(e)h(sure)f(what)h(we)g(need)e(to)i(do.)f(And)g(do)h(some)f
(research.)f(2017/10/05)f(W)-7 b(e)25 b(started)-150
3877 y(to)36 b(b)n(uild)g(our)f(k)o(ernal)g(follo)n(wing)f(the)i
(material.)f(But)i(the)f(things)f(were)h(not)g(going)e(well.)i(W)-7
b(e)38 b(tried)d(to)h(do)g(some)g(search)f(online)g(and)-150
4026 y(ask)o(ed)25 b(help)g(from)g(our)g(classmates.)h(W)-7
b(e)27 b(thought)c(we)j(b)n(uild)g(our)e(k)o(ernel)h(sucessfully)-5
b(.)25 b(And)g(started)g(to)h(w)o(ork)f(on)g(concurrenc)o(y)d
(problems.)-150 4176 y(2017/10/06)j(Got)k(much)f(useful)g(information)e
(from)h(W)-7 b(ebEx)29 b(conference)d(calls.)j(And)f(we)h(w)o(anted)f
(to)h(b)n(uild)f(our)g(k)o(ernel)g(again)f(to)i(mak)o(e)-150
4325 y(sure)h(we)g(did)f(correctly)-5 b(.)28 b(And)i(continuted)d(to)j
(w)o(ork)g(on)f(concurrenc)o(y)d(problems.)j(2017/10/07)d(Still)31
b(w)o(ork)o(ed)e(on)g(concurrenc)o(y)e(and)i(did)-150
4475 y(some)37 b(deb)n(ugs)f(because)h(we)g(got)g(some)g(problems.)e
(And)i(started)g(to)g(w)o(ork)f(on)h(Write-Up.)g(2017/10/08)c(Finished)
k(deb)n(ugs)f(and)h(k)o(ept)-150 4624 y(w)o(orking)27
b(on)h(Late)o(x.)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
